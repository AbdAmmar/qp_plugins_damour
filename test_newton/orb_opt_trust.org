* Orbital optimization program

This is an optimization program for molecular orbitals. It produces
orbital rotations in order to lower the energy of the wave function. 
This program just optimize the orbitals for a fixed number of
determinants. This optimization process must be repeat for different
number of determinants.

#+BEGIN_SRC f90 :comments org :tangle org_orb_opt_trust.irp.f
#+END_SRC

* Main program : orb_opt_trust

#+BEGIN_SRC f90 :comments org :tangle org_orb_opt_trust.irp.f 
program org_orb_opt_trust
  read_wf = .True. ! must be True for the orbital optimization !!!
  TOUCH read_wf
  call org_run_orb_opt_trust
end
#+END_SRC

* Subroutine : run_orb_opt_trust

#+BEGIN_SRC f90 :comments org :tangle org_orb_opt_trust.irp.f
#+END_SRC

** Optimization process :
   - compute the gradient
   - compute the hessian 
   - diagonalize the hessian
   - compute the Newton step's in the trust region
   - compute the predicted energy for the new MOs
   - compute the rotation matrix
   - compute the new MOs
   - diagonalize the hamiltonian
   - compute rho, the quality of the model. While the quality is not good,
     the orbital rotations are cancelled and the a smaller Newton step is
     computed. If there is a good agreement, the step is accepted and the
     algorithm compute a new Newton step's.

   The convergence criterion is the maximal value in the gradient. To
   avoid problems, there is a limit in the number of hamiltonian
   diagonalization.  

   #+BEGIN_SRC f90 :comments org :tangle org_orb_opt_trust.irp.f
subroutine org_run_orb_opt_trust
  implicit none
   #+END_SRC

   =================================
   Subroutine to optimize orbitals
   =================================

** Variables 
   #+BEGIN_SRC f90 :comments org :tangle org_orb_opt_trust.irp.f
  double precision, allocatable :: grad(:,:),R(:,:)
  double precision, allocatable :: H(:,:),h_f(:,:,:,:)
  double precision, allocatable :: v_grad(:),m_x(:,:),x(:)
  double precision, allocatable :: e_val(:), w(:,:)
  double precision, allocatable :: prev_mos(:,:),new_mos(:,:)
  integer                       :: info,method
  integer                       :: n
  integer                       :: i,j,p,q,k
  double precision              :: max_elem, delta, rho
  logical :: converged, cancel_step
  integer :: nb_iter, nb_diag, nb_cancel, nb_cancel_tot
  double precision :: prev_energy, e_model
  double precision :: t1, t2, t3
  ! grad   : mo_num by mo_num double precision matrix, the gradient for the gradient method
  ! R      : mo_num by mo_num double precision matrix, rotation matrix to change the MOs
  ! H      : n by n double precision matrix, Hessian matrix
  ! v_grad : double precision vector of length n, gradient
  ! info   : integer, if 0 ok, else problem in a Lapack routine
  ! method : - 1 : Full hessian
  !          - 2 : Diagonal hessian
  ! n      :  integer, n = mo_num*(mo_num-1)/2, number of orbital pairs (p,q) with p < q
  ! i,j,p,q,k : integer, indexes
  ! e_model : double precision, predicted energy after the orbital rotation
  ! max_elem : double precision, maximum element value in the gradient
  ! cancel_step : logical, if the previous step must be cancel
  ! converged : logical, if the algorithm is converged
  ! nb_iter : integer, number of iteration
  ! prev_energy : double precision, previous energy
  ! prev_mos : ao_num by mo_num double precision matrix containing the previous mos
  ! new_mos : ao_num by mo_num double precision matrix containing the new mos

  PROVIDE mo_two_e_integrals_in_map ci_energy psi_det psi_coef
   #+END_SRC

** Method
   There are two different methods : 
   - the "full" hessian, which uses all the elements of the hessian
     matrix, called "hess" in "hessian.irp.f"
   - the "diagonal" hessian, which uses only the diagonal elements of the
     hessian, called "diag_hess" in "diagonal_hessian.irp.f"

   #+BEGIN_SRC f90 :comments org :tangle org_orb_opt_trust.irp.f
  ! Choice of the method
  method = 2  ! 1 -> full h, 2 -> diag_h

  !Display the method
  print*, 'Method :', method
   #+END_SRC

** Allocation

   n represents the number of pairs (p,q) with p<q.
   Where p and q are general molecular orbitals

   In other words, the gradient is an antisymmetric matrix of size mo_num
   by mo_num. So we can summarize the matrix by the lower/upper triangle.
   And this triangle is composed of :
   $$(mo_{num}^2 - mo_{num})/2 = mo_{num}(mo_{num}-1)/2$$

   #+BEGIN_SRC f90 :comments org :tangle org_orb_opt_trust.irp.f
  ! Definition of n
  n = mo_num*(mo_num-1)/2

  allocate(v_grad(n), H(n,n)) ! gradient and hessian
  allocate(R(mo_num,mo_num))  ! rotation matrix
  allocate(m_x(mo_num,mo_num),x(n))  ! Newton step
  allocate(e_val(n), w(n,n))  ! eigenvalues and eigenvectors
  allocate(h_f(mo_num,mo_num,mo_num,mo_num))  ! 4D hessian (debug)
  allocate(prev_mos(ao_num,mo_num),new_mos(ao_num,mo_num)) ! old and new MOs
   #+END_SRC

** Calculations
*** Initialization

    #+BEGIN_SRC f90 :comments org :tangle org_orb_opt_trust.irp.f
  converged = .False.
  cancel_step = .False.
  delta = 0d0
  rho = 0.5d0 ! Must be 0.5 for the first step else delta will be changed
  nb_iter = 0
  nb_cancel = 0
  nb_diag = 0
  nb_cancel_tot = 0

  ! Initialization of the CI energy
  call diagonalize_ci

  print *, 'CI energy : ', ci_energy
  prev_energy = 0d0
  do i = 1, N_states
     prev_energy = prev_energy + ci_energy(i) * state_average_weight(i)
  enddo
  prev_energy = prev_energy / DBLE(N_states)
  print*, 'State av energy :', prev_energy

    #+END_SRC

*** Algorithm

    "gradient" takes n and gives :
    - v_grad, the gradient in a vector 
    - max_elem, its bigger element in absolute value

    "hess" or "diag_hess" takes n and gives :
    - H, the n by n hessian
    - h_f, the 4D mo_num hessian (debug)

    "diagonalization_hessian" takes n and H and gives :
    - e_val, the eigenvalues
    - w, the eigenvectors

    "trust_region" takes n, method, nb_iter, H, v_grad, rho, e_val, w,
    delta and gives :
    - x, the step in the trust region (vector)
    - m_x, the step in the trust region (antisymmetric matrix) 
    - delta, the trust region (updated)  

    "trust_e_model" takes n, x, v_grad, H and gives :
    - e_model, the predicted energy after the rotation, using the Taylor
      expansion at the 2nd order

    "rotation_matrix" takes mo_num, m_x and gives :
    - R, the rotation matrix to compute the next MOs

    "apply_mo_rotation" takes R (and the MO coefficients) and gives :
    - prev_mos, the previous MOs <=> MOs before the rotation 
    - new_mos, the new MOs <=> MOs after the rotation

    "rho_model" takes prev_energy, e_model (and the actual energy) and gives :
    - rho, which estimate the 'quality' of the model (taylor expansion)
      compare to the real energy

    While rho < 0.1 the algorithm goes back to "trust_region" and delta
    will be reduced.
    If rho >= 0.1 the step is accepted and the algorithm goes back to
    the camculation of the gradient.

    #+BEGIN_SRC f90 :comments org :tangle org_orb_opt_trust.irp.f
  do while (.not.converged)

     print*,'*********************'
     print*,'Iteration :', nb_iter
     print*,'*********************'

     !print *, 'CI energy : ', ci_energy

     ! Gradient
     call org_gradient(n,v_grad,max_elem)

     ! Hessian
     if (method == 1) then
        call org_hess(n,H,h_f) !h_f -> debug
     else
        call org_diag_hess(n,H,h_f) !h_f -> debug
     endif

     ! Diagonalization of the hessian
     call org_diagonalization_hessian(n,H,e_val,w)

     cancel_step = .True.
     nb_cancel = 0

     ! Loop to ensure the diminution of the energy
     ! Each time rho is too small or rho < 0, the trust region
     ! is done with a smaller delta
     do while ( cancel_step )

        ! Step size in the trust region
        call org_trust_region(n,method,nb_iter,H,v_grad,rho,e_val,w,x,m_x,delta)

        ! Estimation of the energy after the rotation (application of the Newton step's)
        call org_trust_e_model(n,v_grad,H,x,prev_energy,e_model)

        ! Calculation of the rotation matrix
        call org_rotation_matrix(m_x,mo_num,R,mo_num,mo_num,info)

        ! Calculation of the new MOs
        call org_apply_mo_rotation(R,prev_mos)!,new_mos)

        ! Update and diagonalization of the hamiltonian
        call clear_mo_map
        TOUCH mo_coef psi_det psi_coef
        call diagonalize_ci
        call save_wavefunction_unsorted

        ! Calculation of rho
        call org_rho_model(prev_energy,e_model,rho)

        if (nb_iter == 0) then
          nb_iter = 1 ! in order to enable the change of delta if the first iteration is cancelled  
        endif

        if (rho >= 0.1d0) then
           ! exit
           cancel_step = .False.
        else
           ! Cancellation of the previous rotation
           mo_coef = prev_mos ! previous MOs 
           call save_mos

           nb_cancel = nb_cancel + 1
           nb_cancel_tot = nb_cancel_tot + 1
           print*, '***********************'
           print*, 'Step cancel : rho < 0.1'
           print*, '***********************'
        endif
        nb_diag = nb_diag + 1

        print*, 'nb_diag :', nb_diag
        print*, 'nb_cancel :', nb_cancel
        print*, 'nb_cancel_tot :', nb_cancel_tot

        ! exit  
        if (nb_diag >= 100) then
           print*,'nb_diag >= 100 : end'
           return
        endif

     enddo

     nb_iter = nb_iter + 1

     if (nb_diag >= 100 .or. ABS(max_elem) <= 1d-5) then
        converged = .True.
     endif

  enddo
    #+END_SRC
    
** Deallocation, end

    #+BEGIN_SRC f90 :comments org :tangle org_orb_opt_trust.irp.f
  deallocate(v_grad,H,m_x,R,x,e_val,w)
  deallocate(h_f,prev_mos,new_mos)

end
    #+END_SRC
