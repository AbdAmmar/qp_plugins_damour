[optimization_method]
type: character*(32)
doc: Define the kind of hessian for the orbital optimization full : full hessian, diag : diagonal hessian, none : no hessian
interface: ezfio,provider,ocaml
default: full

[normalized_st_av_weight]
type: logical
doc: If true, orbital optimization uses normalized state average weight, else it uses the state average weight provided
interface: ezfio,provider,ocaml
default: true

[start_from_wf]
type: logical
doc: If true and n_det > 1, orbital optimization starts from the initial wave function, else starts from n_det_start determinants by adding determinants in the wave function or truncating the wave function
interface: ezfio,provider,ocaml
default: true

[truncate_wf]
type: logical
doc: If true and start_from_wf is true, orbital optimization starts from the initial wave function truncated at n_det_start determinants (at least)
interface: ezfio,provider,ocaml
default: false

[n_det_start]
type: integer
doc: Number of determinants after which the orbital optimization will start, n_det_start must be greater than 1. The algorithm does a cipsi until n_det > n_det_start and the optimization starts after
interface: ezfio,provider,ocaml
default: 5

[n_det_max_opt]
type: integer
doc: Maximal number of the determinants in the wf for the orbital optimization (to stop the optimization if n_det > n_det_max_opt)
interface: ezfio,provider,ocaml
default: 200000

[targeted_accuracy_cipsi]
type: double precision
doc: Threshold to stop the orbital optimization if the gain is smaller than the targeted accuracy. WARNING: A step can produce a small gain before an other step with a larger gain. This phenomenon decreases with the size of the wave function 
interface: ezfio,provider,ocaml
default: 1.e-4

[optimization_max_nb_iter]
type: integer
doc: Maximal number of iterations for the orbital optimization
interface: ezfio,provider,ocaml
default: 20

[thresh_opt_max_elem_grad]
type: double precision
doc: Threshold for the convergence, the optimization exits when the biggest element in the gradient is smaller than thresh_optimization_max_elem_grad
interface: ezfio,provider,ocaml
default: 1.e-4

[thresh_opt_energy_gain]
type: double precision
doc: Threshold for the convergence, the optimization exits when the energy gain in smaller than thresh_opt_energy_gain and the max element un the gradient is smaller than 10 times thresh_opt_max_elem_grad
interface: ezfio,provider,ocaml
default: 1.e-5

[localization_method]
type: character*(32)
doc: Method for the orbital localization. boys : Foster-Boys, pipek : Pipek-Mezey
interface: ezfio,provider,ocaml
default: boys

[localization_max_nb_iter]
type: integer
doc: Maximal number of iterations for the orbital localization
interface: ezfio,provider,ocaml
default: 1000

[security_mo_class]
type: logical
doc: If true, call abort if the number of active orbital or the number of core + active orbitals is equal to the number of molecular orbitals, else uses the actual mo_class. It is a security if you forget to set the mo_class before the localization
interface: ezfio,provider,ocaml
default: true

[thresh_loc_max_elem_grad]
type: double precision
doc: Threshold for the convergence, the localization exits when the largest element in the gradient is smaller than thresh_localization_max_elem_grad
interface: ezfio,provider,ocaml
default: 1.e-6

[kick_in_mos]
type: logical
doc: If True, apply a rotation of an angle angle_pre_rot between the MOs of a same mo_class before the localization
interface: ezfio,provider,ocaml
default: true

[angle_pre_rot]
type: double precision
doc: Define the angle for the rotation of the MOs before the localization (in rad)
interface: ezfio,provider,ocaml
default: 0.1

[sort_mos_by_e]
type: logical
doc: If True, sorts the MOs using the diagonal elements of the Fock matrix
interface: ezfio,provider,ocaml
default: false
