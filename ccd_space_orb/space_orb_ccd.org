* Working: CCD O(N^6) with spatial orbitals

Scuseria, Gustavo E.; Janssen, Curtis L.; Schaefer, Henry
F. (1988). An efficient reformulation of the closed-shell coupled
cluster single and double excitation (CCSD) equations. The Journal of
Chemical Physics, 89(12), 7382â€“. doi:10.1063/1.455269

\begin{align*}
r_{ij}^{ab} &= v_{ij}^{ab} + \sum_{kl} v_{ij}^{kl} t_{kl}^{ab} + \sum_{cd} v_{cd}^{ab} t_{ij}^{cd} \\
&+ \sum_{klcd} v_{cd}^{kl} t_{ij}^{cd} t_{kl}^{ab} \\
&+ \Omega_{ij}^{ab} [g_c^a t_{ij}^{cb} - g_i^k t_{kj}^{ab} + j_{ic}^{ak}(2 t_{kj}^{cb} - t_{kj}^{bc}) - k_{ic}^{ka} t_{kj}^{cb} - k_{ic}^{kb} t_{kj}^{ac}]
\end{align*}

** Code

#+BEGIN_SRC f90 :comments org :tangle space_orb_ccd.irp.f
program space_orb_ccd
  
  implicit none

  integer :: i,j,k,l,a,b,c,d,tmp_a,tmp_b,tmp_c,tmp_d
  integer :: nO, nV
  integer :: nb_iter
  double precision :: get_two_e_integral
  double precision :: energy, max_elem
  logical :: not_converged

  double precision, allocatable :: t2(:,:,:,:), r(:,:,:,:), delta(:,:,:,:)
  double precision, allocatable :: g_occ(:,:), g_vir(:,:), J1(:,:,:,:), K1(:,:,:,:)
  
  nO = dim_list_inact_orb
  nV = dim_list_virt_orb
  
  allocate(t2(nO,nO,nV,nV), r(nO,nO,nV,nV), delta(nO,nO,nV,nV))
  allocate(g_occ(nO,nO), g_vir(nV,nV))
  allocate(J1(nO,nV,nV,nO), K1(nO,nV,nO,nV))
  
  PROVIDE mo_two_e_integrals_in_map

  print*,'hf_energy', hf_energy

  ! Delta
  call space_ccd_delta(delta)

  ! Guess t2
  call space_ccd_guess_t2(delta,t2)

  nb_iter = 0
  do while (nb_iter < 25)
  
    ! energy
    call space_ccd_energy(t2,energy)
    print*, 'E_CCD', energy

    call space_ccd_g_occ(t2,g_occ)
    call space_ccd_g_vir(t2,g_vir)
    call space_ccd_J1(t2,J1)
    call space_ccd_K1(t2,K1)

    ! Residue
    call space_ccd_residue(delta,t2,g_occ,g_vir,J1,K1,r)
!    r = 0d0
!    do b = 1, nV
!      tmp_b = b + nO
!      do a = 1, nV
!        tmp_a = a + nO
!        do j = 1, nO
!          do i = 1, nO
!
!            r(i,j,a,b) = r(i,j,a,b) &
!            + v_oovv(i,j,a,b)
!
!            do l = 1, nO
!              do k = 1, nO
!                r(i,j,a,b) = r(i,j,a,b) &
!                + v_oooo(i,j,k,l) * t2(k,l,a,b)
!              enddo
!            enddo
!
!            do d = 1, nV
!              tmp_d = d + nO
!              do c = 1, nV
!                tmp_c = c + nO
!                r(i,j,a,b) = r(i,j,a,b) &
!                + v_vvvv(c,d,a,b) * t2(i,j,c,d)
!              enddo
!            enddo
!
!             do d = 1, nV
!              tmp_d = d + nO
!              do c = 1, nV
!                tmp_c = c + nO
!                do l = 1, nO
!                  do k = 1, nO
!                    r(i,j,a,b) = r(i,j,a,b) &
!                    + v_vvoo(c,d,k,l) * t2(i,j,c,d) * t2(k,l,a,b)
!                  enddo
!                enddo
!              enddo
!            enddo
!
!            do c = 1, nV
!              tmp_c = c + nO
!              r(i,j,a,b) = r(i,j,a,b) &
!              + g_vir(c,a) * t2(i,j,c,b) + g_vir(c,b) * t2(j,i,c,a)
!            enddo
!
!            do k = 1, nO
!              r(i,j,a,b) = r(i,j,a,b) &
!              - g_occ(i,k) * t2(k,j,a,b) - g_occ(j,k) * t2(k,i,b,a)
!            enddo
!
!            do c = 1, nV
!              tmp_c = c + nO
!              do k = 1, nO
!                r(i,j,a,b) = r(i,j,a,b) &
!                + J1(i,c,a,k) * (2d0 * t2(k,j,c,b) - t2(k,j,b,c)) &
!                + J1(j,c,b,k) * (2d0 * t2(k,i,c,a) - t2(k,i,a,c)) &
!                - K1(i,c,k,a) * t2(k,j,c,b) &
!                - K1(j,c,k,b) * t2(k,i,c,a) &
!                - K1(i,c,k,b) * t2(k,j,a,c) &
!                - K1(j,c,k,a) * t2(k,i,b,c)
!              enddo
!            enddo
!           
!          enddo
!        enddo
!      enddo
!    enddo

    call space_ccd_check_conv(r,max_elem)
    print*,'max', max_elem

    ! Update t2
    call space_ccd_update_t2(delta,r,t2)

    nb_iter = nb_iter + 1
  enddo 

  deallocate(t2,r,delta)
  deallocate(g_occ,g_vir,J1, K1)

end
#+END_SRC

** Energy
#+BEGIN_SRC f90 :comments org :tangle space_orb_ccd.irp.f
subroutine space_ccd_energy(t2,e_ccd)

  implicit none

  double precision, intent(in)  :: t2(dim_list_inact_orb, dim_list_inact_orb, dim_list_virt_orb, dim_list_virt_orb)
  double precision, intent(out) :: e_ccd

  integer :: i,j,a,b,tmp_a,tmp_b
  integer :: nO, nV

  nO = dim_list_inact_orb
  nV = dim_list_virt_orb
  
  e_ccd = 0d0
  do b = 1, nV
    do a = 1, nV
      do j = 1, nO
        do i = 1, nO
          !e_ccd = e_ccd + t2(i,j,a,b) * (2d0 * two_e_ints(i,j,tmp_a,tmp_b) - two_e_ints(i,j,tmp_b,tmp_a))
          e_ccd = e_ccd + t2(i,j,a,b) * wcc_oovv(i,j,a,b)
        enddo
      enddo
    enddo
  enddo
  
  e_ccd = e_ccd + hf_energy
  
end
#+END_SRC

** Delta
#+BEGIN_SRC f90 :comments org :tangle space_orb_ccd.irp.f
subroutine space_ccd_delta(delta)

  implicit none

  double precision, intent(out) :: delta(dim_list_inact_orb, dim_list_inact_orb, dim_list_virt_orb, dim_list_virt_orb)

  integer :: i,j,a,b,tmp_a,tmp_b
  integer :: nO, nV

  nO = dim_list_inact_orb
  nV = dim_list_virt_orb
  
  do b = 1, nV
    do a = 1, nV
      do j = 1, nO
        do i = 1, nO
          
          delta(i,j,a,b) = (fcc_vv(a,a) + fcc_vv(b,b)&
                          - fcc_oo(i,i) - fcc_oo(j,j))
        enddo
      enddo
    enddo
  enddo
  
end
#+END_SRC

** Guess T2
#+BEGIN_SRC f90 :comments org :tangle space_orb_ccd.irp.f
subroutine space_ccd_guess_t2(delta,t2)

  implicit none

  double precision, intent(in)  :: delta(dim_list_inact_orb, dim_list_inact_orb, dim_list_virt_orb, dim_list_virt_orb)
  double precision, intent(out) :: t2(dim_list_inact_orb, dim_list_inact_orb, dim_list_virt_orb, dim_list_virt_orb)

  integer :: i,j,a,b,tmp_a,tmp_b
  integer :: nO, nV

  nO = dim_list_inact_orb
  nV = dim_list_virt_orb
  
  do b = 1, nV
    do a = 1, nV
      do j = 1, nO
        do i = 1, nO
          t2(i,j,a,b) = - vcc_oovv(i,j,a,b)/delta(i,j,a,b)
        enddo
      enddo
    enddo
  enddo
  
end
#+END_SRC

** Update T2
#+BEGIN_SRC f90 :comments org :tangle space_orb_ccd.irp.f
subroutine space_ccd_update_t2(delta,r,t2)

  implicit none

  double precision, intent(in)  :: delta(dim_list_inact_orb, dim_list_inact_orb, dim_list_virt_orb, dim_list_virt_orb)
  double precision, intent(in)  :: r(dim_list_inact_orb, dim_list_inact_orb, dim_list_virt_orb, dim_list_virt_orb)
  double precision, intent(out) :: t2(dim_list_inact_orb, dim_list_inact_orb, dim_list_virt_orb, dim_list_virt_orb)

  integer :: i,j,a,b,tmp_a,tmp_b
  integer :: nO, nV

  nO = dim_list_inact_orb
  nV = dim_list_virt_orb
  
  do b = 1, nV
    do a = 1, nV
      do j = 1, nO
        do i = 1, nO
          t2(i,j,a,b) =  t2(i,j,a,b) - r(i,j,a,b) / delta(i,j,a,b)
        enddo
      enddo
    enddo
  enddo
  
end
#+END_SRC

** Max elem in r
#+BEGIN_SRC f90 :comments org :tangle space_orb_ccd.irp.f
subroutine space_ccd_check_conv(r,max_elem)

  implicit none

  double precision, intent(in)  :: r(dim_list_inact_orb, dim_list_inact_orb, dim_list_virt_orb, dim_list_virt_orb)
  double precision, intent(out) :: max_elem

  integer :: i,j,a,b,tmp_a,tmp_b
  integer :: nO, nV

  nO = dim_list_inact_orb
  nV = dim_list_virt_orb
  
  max_elem = 0d0
  do b = 1, nV
    do a = 1, nV
      do j = 1, nO
        do i = 1, nO
          if (max_elem < dabs(r(i,j,a,b))) then
            max_elem = dabs(r(i,j,a,b))
          endif
        enddo
      enddo
    enddo
  enddo
  
end
#+END_SRC

** X1
\begin{align*}
X1_{ij}^{ab} = \sum_{kl} v_{ij}^{kl} t2_{kl}^{ab}
\end{align*}

#+BEGIN_SRC f90 :comments org :tangle space_orb_ccd.irp.f
subroutine space_ccd_X1(t2,X1)

  implicit none

  double precision, intent(in)  :: t2(dim_list_inact_orb, dim_list_inact_orb, dim_list_virt_orb, dim_list_virt_orb)
  double precision, intent(out) :: X1(dim_list_inact_orb, dim_list_inact_orb, dim_list_virt_orb, dim_list_virt_orb)

  integer :: i,j,k,l,a,b
  integer :: nO, nV

  nO = dim_list_inact_orb
  nV = dim_list_virt_orb
  
  !X1_{ij}^{ab} = \sum_{kl} v_{ij}^{kl} t2_{kl}^{ab}
  !X1 = 0d0
  !do b = 1, nV
  !  do a = 1, nV
  !    do j = 1, nO
  !      do i = 1, nO

  !        do l = 1, nO
  !          do k = 1, nO
  !            X1(i,j,a,b) = X1(i,j,a,b) &
  !            + v_oooo(i,j,k,l) * t2(k,l,a,b)
  !          enddo
  !        enddo
  !        
  !      enddo
  !    enddo
  !  enddo
  !enddo
  
  call dgemm('N','N', nO*nO, nV*nV, nO*nO,&
             1d0, vcc_oooo, size(vcc_oooo,1) * size(vcc_oooo,2), &
             t2, size(t2,1) * size(t2,2), &
             0d0, X1, size(X1,1) * size(X1,2))
  
end
#+END_SRC

** X2
\begin{align*}
X2_{ij}^{ab} = \sum_{cd} v_{cd}^{ab} t2_{ij}^{cd}
\end{align*}

#+BEGIN_SRC f90 :comments org :tangle space_orb_ccd.irp.f
subroutine space_ccd_X2(t2,X2)

  implicit none

  double precision, intent(in)  :: t2(dim_list_inact_orb, dim_list_inact_orb, dim_list_virt_orb, dim_list_virt_orb)
  double precision, intent(out) :: X2(dim_list_inact_orb, dim_list_inact_orb, dim_list_virt_orb, dim_list_virt_orb)

  integer :: i,j,k,l,a,b,c,d
  integer :: nO, nV

  nO = dim_list_inact_orb
  nV = dim_list_virt_orb

  !X2_{ij}^{ab} = \sum_{cd} v_{cd}^{ab} t2_{ij}^{cd}
  !X2 = 0d0
  !do b = 1, nV
  !  do a = 1, nV
  !    do j = 1, nO
  !      do i = 1, nO

  !        do d = 1, nV
  !          do c = 1, nV
  !            X2(i,j,a,b) = X2(i,j,a,b) &
  !            + v_vvvv(c,d,a,b) * t2(i,j,c,d)
  !          enddo
  !        enddo
  !        
  !      enddo
  !    enddo
  !  enddo
  !enddo
  
  call dgemm('N','N', nO*nO, nV*nV, nV*nV,&
             1d0, t2, size(t2,1) * size(t2,2), &
             vcc_vvvv, size(vcc_vvvv,1) * size(vcc_vvvv,2), &
             0d0, X2, size(X2,1) * size(X2,2))
  
end
#+END_SRC

** X3
\begin{align*}
X3_{ij}^{ab} &= \sum_{klcd} v_{cd}^{kl} t2_{ij}^{cd} t2_{kl}^{ab} \\
&=  \sum_{klcd} t2_{ij}^{cd} v_{cd}^{kl} t2_{kl}^{ab}
\end{align*}
#+BEGIN_SRC f90 :comments org :tangle space_orb_ccd.irp.f
subroutine space_ccd_X3(t2,X3)

  implicit none

  double precision, intent(in)  :: t2(dim_list_inact_orb, dim_list_inact_orb, dim_list_virt_orb, dim_list_virt_orb)
  double precision, intent(out) :: X3(dim_list_inact_orb, dim_list_inact_orb, dim_list_virt_orb, dim_list_virt_orb)

  integer :: i,j,k,l,a,b,c,d
  integer :: nO, nV

  double precision, allocatable :: accu(:,:,:,:)

  nO = dim_list_inact_orb
  nV = dim_list_virt_orb

  allocate(accu(nO,nO,nO,nO))
  
  !X3_{ij}^{ab} = \sum_{klcd} t2_{ij}^{cd} v_{cd}^{kl} t2_{kl}^{ab}
  !X3 = 0d0
  !do b = 1, nV
  !  do a = 1, nV
  !    do j = 1, nO
  !      do i = 1, nO

  !        do d = 1, nV
  !          do c = 1, nV
  !            do l = 1, nO
  !              do k = 1, nO
  !                X3(i,j,a,b) = X3(i,j,a,b) &
  !                + v_vvoo(c,d,k,l) * t2(i,j,c,d) * t2(k,l,a,b)
  !              enddo
  !            enddo
  !          enddo
  !        enddo
  !        
  !      enddo
  !    enddo
  !  enddo
  !enddo

  ! \sum_{cd} t2_{ij}^{cd} v_{cd}^{kl}
  call dgemm('N','N', nO*nO, nO*nO, nV*nV,&
             1d0, t2, size(t2,1) * size(t2,2), &
             vcc_vvoo, size(vcc_vvoo,1) * size(vcc_vvoo,2), &
             0d0, accu, size(accu,1) * size(accu,2))

  ! \sum_{kl} accu_{ij}^{kl} t2_{kl}^{ab}
  call dgemm('N','N', nO*nO, nV*nV, nO*nO,&
             1d0, accu, size(accu,1) * size(accu,2), &
             t2, size(t2,1) * size(t2,2), &
             0d0, X3, size(X3,1) * size(X3,2))

  deallocate(accu)
  
end
#+END_SRC

** G1
\begin{align*}
G1_{ij}^{ab} &= \sum_k gocc_{i}^{k} t2_{kj}^{ab} \\
&= \text{reshape}((nO,nO*nV*nV) \rightarrow (nO,nO,nV,nV)) \sum_k gocc_{i}^{k} t2_{k}^{jab}
\end{align*}

#+BEGIN_SRC f90 :comments org :tangle space_orb_ccd.irp.f
subroutine space_ccd_G1(t2,g_occ,G1)

  implicit none

  double precision, intent(in)  :: t2(dim_list_inact_orb, dim_list_inact_orb, dim_list_virt_orb, dim_list_virt_orb)
  double precision, intent(in)  :: g_occ(dim_list_inact_orb, dim_list_inact_orb)
  double precision, intent(out) :: G1(dim_list_inact_orb, dim_list_inact_orb, dim_list_virt_orb, dim_list_virt_orb)

  integer :: i,j,k,l,a,b,c,d
  integer :: nO, nV

  nO = dim_list_inact_orb
  nV = dim_list_virt_orb

  double precision, allocatable :: tmp_G1(:,:)

  allocate(tmp_G1(nO,nO*nV*nV))

  ! G1_{ij}^{ab} &= \sum_k gocc_{i}^{k} t2_{kj}^{ab}
  !G1 = 0d0
  !do b = 1, nV
  !  do a = 1, nV
  !    do j = 1, nO
  !      do i = 1, nO
  !        do k = 1, nO
  !          G1(i,j,a,b) = G1(i,j,a,b) + g_occ(i,k) * t2(k,j,a,b)
  !         enddo
  !       enddo
  !    enddo
  !  enddo
  !enddo
  
  call dgemm('N','N', nO, nO*nV*nV, nO,&
             1d0, g_occ, size(g_occ,1), &
             t2, size(t2,1), &
             0d0, tmp_G1, size(tmp_G1,1))

  ! (nO,nO*nV*nV) ->  (nO,nO,nV,nV)
  G1 = reshape(tmp_G1,(/nO,nO,nV,nV/))
  
  deallocate(tmp_G1)

end
#+END_SRC

** G2
\begin{align*}
G2_{ij}^{ab} &= \sum_k gocc_j^k t2_{ki}^{ba} \\
accu_{ji}^{ab} &= ( \text{reshape}((nO,nO*nV*nV) \rightarrow (nO,nO,nV,nV)) \sum_k gocc_j^k tmpt2_{k}^{iba} ) \\
G2_{ij}^{ab} &= accu_{ji}^{ab}
\end{align*}

#+BEGIN_SRC f90 :comments org :tangle space_orb_ccd.irp.f
subroutine space_ccd_G2(t2,g_occ,G2)

  implicit none

  double precision, intent(in)  :: t2(dim_list_inact_orb, dim_list_inact_orb, dim_list_virt_orb, dim_list_virt_orb)
  double precision, intent(in)  :: g_occ(dim_list_inact_orb, dim_list_inact_orb)
  double precision, intent(out) :: G2(dim_list_inact_orb, dim_list_inact_orb, dim_list_virt_orb, dim_list_virt_orb)

  integer :: i,j,k,l,a,b,c,d
  integer :: nO, nV

  nO = dim_list_inact_orb
  nV = dim_list_virt_orb

  double precision, allocatable :: tmp_G2(:,:), tmp_t2(:,:,:,:), accu(:,:,:,:) 

  allocate(tmp_G2(nO,nO*nV*nV), tmp_t2(nO,nO,nV,nV), accu(nO,nO,nV,nV))

  ! a <-> b
  do b = 1, nV
    do a = 1, nV
      do j = 1, nO
        do i = 1, nO
          tmp_t2(i,j,a,b) = t2(i,j,b,a)
        enddo
      enddo
    enddo
  enddo

  ! G2_{i,j}^{a,b} &= \sum_k gocc_j^k t2_{ki}^{ba}
  !G2 = 0d0
  !do b = 1, nV
  !  do a = 1, nV
  !    do i = 1, nO
  !      do j = 1, nO
  !        do k = 1, nO
  !          G2(i,j,a,b) = G2(i,j,a,b) + g_occ(j,k) * t2(k,i,b,a)
  !          !G2(i,j,a,b) = G2(i,j,a,b) + g_occ(j,k) * tmp_t2(k,i,a,b)
  !         enddo
  !       enddo
  !    enddo
  !  enddo
  !enddo

  call dgemm('N','N', nO, nO*nV*nV, nO,&
             1d0, g_occ, size(g_occ,1), &
             tmp_t2, size(tmp_t2,1), &
             0d0, tmp_G2, size(tmp_G2,1))

  ! (nO,nO*nV*nV) ->  (nO,nO,nV,nV)
  accu = reshape(tmp_G2,(/nO,nO,nV,nV/))

  !! i <-> j
  do b = 1, nV
    do a = 1, nV
      do j = 1, nO
        do i = 1, nO
          G2(i,j,a,b) = accu(j,i,a,b)
        enddo
      enddo
    enddo
  enddo
  
  deallocate(tmp_G2,tmp_t2,accu)

end
#+END_SRC

** G3
\begin{align*}
G3_{ij}^{ab} &= \sum_c gvir_c^a * t2_{ij}^{cb} \\
accu_{ij}^{ba} &= \text{reshape}((nO*nO*nV,nV) \leftrightarrow (nO,nO,nV,nV)), \sum_c tmpt2_{ijb}^{c} gvir_{c}^{a}) \\
G3_{ij}^{ab} &= accu_{ij}^{ba} 
\end{align*}

#+BEGIN_SRC f90 :comments org :tangle space_orb_ccd.irp.f
subroutine space_ccd_G3(t2,g_vir,G3)

  implicit none

  double precision, intent(in)  :: t2(dim_list_inact_orb, dim_list_inact_orb, dim_list_virt_orb, dim_list_virt_orb)
  double precision, intent(in)  :: g_vir(dim_list_virt_orb, dim_list_virt_orb)
  double precision, intent(out) :: G3(dim_list_inact_orb, dim_list_inact_orb, dim_list_virt_orb, dim_list_virt_orb)

  integer :: i,j,k,l,a,b,c,d
  integer :: nO, nV

  nO = dim_list_inact_orb
  nV = dim_list_virt_orb

  double precision, allocatable :: tmp_G3(:,:), tmp_t2(:,:,:,:), accu(:,:,:,:)

  allocate(tmp_G3(nO*nO*nV,nV), accu(nO,nO,nV,nV), tmp_t2(nO,nO,nV,nV))

  ! b <-> a
  do a = 1, nV
    do b = 1, nV
      do j = 1, nO
        do i = 1, nO
         tmp_t2(i,j,b,a) = t2(i,j,a,b)
        enddo
      enddo
    enddo
  enddo
  
  ! G3_{ij}^{ab} &= \sum_c gvir_c^a * t2_{ij}^{cb}
  !G3 = 0d0
  !do b = 1, nV
  !  do a = 1, nV
  !    do j = 1, nO
  !      do i = 1, nO
  !        do c = 1, nV
  !          !G3(i,j,a,b) = G3(i,j,a,b) + g_vir(c,a) * t2(i,j,c,b)
  !          G3(i,j,a,b) = G3(i,j,a,b) + tmp_t2(i,j,b,c) * g_vir(c,a)
  !        enddo
  !      enddo
  !    enddo
  !  enddo
  !enddo
  
  call dgemm('N','N', nO*nO*nV, nV, nV,&
             1d0, tmp_t2, size(tmp_t2,1) * size(tmp_t2,2) * size(tmp_t2,3), &
             g_vir, size(g_vir,1), &
             0d0, tmp_G3, size(tmp_G3,1))

  ! (nO,nO*nV*nV) ->  (nO,nO,nV,nV)
  accu = reshape(tmp_G3,(/nO,nO,nV,nV/))

  ! a <-> b
  do a = 1, nV
    do b = 1, nV
      do j = 1, nO
        do i = 1, nO
          G3(i,j,a,b) = accu(i,j,b,a)
        enddo
      enddo
    enddo
  enddo
  
  deallocate(tmp_G3,accu,tmp_t2)

end
#+END_SRC

** G4
\begin{align*}
G4_{ij}^{ab} &= \sum_c gvir_c^b * t2_{ji}^{ca} \\
G4_{ij}^{ab} &= \text{reshape}((nO*nO*nV,nV) \leftrightarrow (nO,nO,nV,nV)), \sum_c tmpt2_{ija}^{c} gvir_c^b) \\
\end{align*}

#+BEGIN_SRC f90 :comments org :tangle space_orb_ccd.irp.f
subroutine space_ccd_G4(t2,g_vir,G4)

  implicit none

  double precision, intent(in)  :: t2(dim_list_inact_orb, dim_list_inact_orb, dim_list_virt_orb, dim_list_virt_orb)
  double precision, intent(in)  :: g_vir(dim_list_virt_orb, dim_list_virt_orb)
  double precision, intent(out) :: G4(dim_list_inact_orb, dim_list_inact_orb, dim_list_virt_orb, dim_list_virt_orb)

  integer :: i,j,k,l,a,b,c,d
  integer :: nO, nV

  nO = dim_list_inact_orb
  nV = dim_list_virt_orb

  double precision, allocatable :: tmp_G4(:,:), tmp_t2(:,:,:,:), accu(:,:,:,:)

  allocate(tmp_G4(nO*nO*nV,nV), accu(nO,nO,nV,nV), tmp_t2(nO,nO,nV,nV))

  ! b <-> a
  do a = 1, nV
    do b = 1, nV
      do j = 1, nO
        do i = 1, nO
         tmp_t2(i,j,a,b) = t2(j,i,b,a)
        enddo
      enddo
    enddo
  enddo

  ! 
  !G4 = 0d0
  !do b = 1, nV
  !  do a = 1, nV
  !    do j = 1, nO
  !      do i = 1, nO
  !        do c = 1, nV
  !          !G4(i,j,a,b) = G4(i,j,a,b) + g_vir(c,b) * t2(j,i,c,a)
  !          G4(i,j,a,b) = G4(i,j,a,b) + tmp_t2(i,j,a,c) * g_vir(c,b)
  !        enddo
  !      enddo
  !    enddo
  !  enddo
  !enddo
  
  call dgemm('N','N', nO*nO*nV, nV, nV,&
             1d0, tmp_t2, size(tmp_t2,1) * size(tmp_t2,2) * size(tmp_t2,3), &
             g_vir, size(g_vir,1), &
             0d0, tmp_G4, size(tmp_G4,1))

  ! (nO,nO*nV*nV) ->  (nO,nO,nV,nV)
  G4 = reshape(tmp_G4,(/nO,nO,nV,nV/))

  deallocate(tmp_G4,accu,tmp_t2)

end
#+END_SRC

** J1a
\begin{align*}
J1a_{ij}^{ab} = J1_{ic}^{ak} (2 t2_{kj}^{cb} - t2_{kj}^{bc})
\end{align*}
#+BEGIN_SRC f90 :comments org :tangle space_orb_ccd.irp.f
subroutine space_ccd_J1a(t2,J1,J1a)

  implicit none

  double precision, intent(in)  :: t2(dim_list_inact_orb, dim_list_inact_orb, dim_list_virt_orb, dim_list_virt_orb)
  double precision, intent(in)  :: J1(dim_list_inact_orb, dim_list_virt_orb, dim_list_virt_orb, dim_list_inact_orb)
  double precision, intent(out) :: J1a(dim_list_inact_orb, dim_list_inact_orb, dim_list_virt_orb, dim_list_virt_orb)

  integer :: i,j,k,l,a,b,c,d
  integer :: nO, nV

  nO = dim_list_inact_orb
  nV = dim_list_virt_orb

  double precision, allocatable :: tmp_J1(:,:,:,:), tmp_t2(:,:,:,:), accu(:,:,:,:)

  allocate(tmp_J1(nO,nV,nO,nV), tmp_t2(nO,nV,nO,nV), accu(nO,nV,nO,nV))

  do c = 1, nV
    do k = 1, nO
      do a = 1, nV
        do i = 1, nO
           tmp_J1(i,a,k,c) = J1(i,c,a,k) 
         enddo
      enddo
    enddo
  enddo

  do b = 1, nV
    do j = 1, nO
      do c = 1, nV
        do k = 1, nO
           tmp_t2(k,c,j,b) = 2d0 * t2(k,j,c,b) - t2(k,j,b,c)
         enddo
      enddo
    enddo
  enddo  

  ! J1a_{ij}^{ab} = J1_{ic}^{ak} (2 t2_{kj}^{cb} - t2_{kj}^{bc})
  !J1a = 0d0
  !do b = 1, nV
  !  do a = 1, nV
  !    do j = 1, nO
  !      do i = 1, nO
  !        do k = 1, nO
  !          do c = 1, nV
  !            !J1a(i,j,a,b) = J1a(i,j,a,b) + J1(i,c,a,k) * (2d0 * t2(k,j,c,b) - t2(k,j,b,c))
  !            J1a(i,j,a,b) = J1a(i,j,a,b) + tmp_J1(i,a,k,c) * tmp_t2(k,c,j,b)
  !          enddo
  !        enddo
  !      enddo
  !    enddo
  !  enddo
  !enddo
  
  call dgemm('N','N', nO*nV, nO*nV, nO*nV, &
             1d0, tmp_J1, size(tmp_J1,1) * size(tmp_J1,2), &
             tmp_t2, size(tmp_t2,1) * size(tmp_t2,2), &
             0d0, accu, size(accu,1) * size(accu,2))

  do b = 1, nV
    do a = 1, nV
      do j = 1, nO
        do i = 1, nO
          J1a(i,j,a,b) = accu(i,a,j,b)
        enddo
      enddo
    enddo
  enddo
        
  deallocate(tmp_J1,tmp_t2,accu)

end
#+END_SRC

** J1b
\begin{align*}
J1b_{ij}^{ab} = \sum_{kc} J1_{jc}^{bk} (2 t2_{ki}^{ca} - t2_{ki}^{ac})
\end{align*}

#+BEGIN_SRC f90 :comments org :tangle space_orb_ccd.irp.f
subroutine space_ccd_J1b(t2,J1,J1b)

  implicit none

  double precision, intent(in)  :: t2(dim_list_inact_orb, dim_list_inact_orb, dim_list_virt_orb, dim_list_virt_orb)
  double precision, intent(in)  :: J1(dim_list_inact_orb, dim_list_virt_orb, dim_list_virt_orb, dim_list_inact_orb)
  double precision, intent(out) :: J1b(dim_list_inact_orb, dim_list_inact_orb, dim_list_virt_orb, dim_list_virt_orb)

  integer :: i,j,k,l,a,b,c,d
  integer :: nO, nV

  nO = dim_list_inact_orb
  nV = dim_list_virt_orb

  double precision, allocatable :: tmp_J1(:,:,:,:), tmp_t2(:,:,:,:), accu(:,:,:,:)

  allocate(tmp_J1(nO,nV,nO,nV), tmp_t2(nO,nV,nO,nV), accu(nO,nV,nO,nV))

  do c = 1, nV
    do k = 1, nO
      do b = 1, nV
        do j = 1, nO
           tmp_J1(j,b,k,c) =  J1(j,c,b,k)
         enddo
      enddo
    enddo
  enddo

  do a = 1, nV
    do i = 1, nO
      do c = 1, nV
        do k = 1, nO
           tmp_t2(k,c,i,a) = 2d0 * t2(k,i,c,a) - t2(k,i,a,c)
         enddo
      enddo
    enddo
  enddo  

  ! J1b_{ij}^{ab} = \sum_{kc} J1_{jc}^{bk} (2 t2_{ki}^{ca} - t2_{ki}^{ac})
  !J1b = 0d0
  !do b = 1, nV
  !  do a = 1, nV
  !    do j = 1, nO
  !      do i = 1, nO
  !        do k = 1, nO
  !          do c = 1, nV
  !            J1b(i,j,a,b) = J1b(i,j,a,b) + J1(j,c,b,k) * (2d0 * t2(k,i,c,a) - t2(k,i,a,c))
  !            !J1b(i,j,a,b) = J1b(i,j,a,b) + tmp_J1(j,b,k,c) * tmp_t2(k,c,i,a)
  !          enddo
  !        enddo
  !      enddo
  !    enddo
  !  enddo
  !enddo
  
  call dgemm('N','N', nO*nV, nO*nV, nO*nV, &
             1d0, tmp_J1, size(tmp_J1,1) * size(tmp_J1,2), &
             tmp_t2, size(tmp_t2,1) * size(tmp_t2,2), &
             0d0, accu, size(accu,1) * size(accu,2))

  do b = 1, nV
    do a = 1, nV
      do j = 1, nO
        do i = 1, nO
          J1b(i,j,a,b) = accu(j,b,i,a)
        enddo
      enddo
    enddo
  enddo
        
  deallocate(tmp_J1,tmp_t2,accu)

end
#+END_SRC

** K1a
\begin{align*}
K1a_{ij}^{ab} = \sum_{ck} K1_{ic}^{ka} * t2_{kj}^{cb}
\end{align*}

#+BEGIN_SRC f90 :comments org :tangle space_orb_ccd.irp.f
subroutine space_ccd_K1a(t2,K1,K1a)

  implicit none

  double precision, intent(in)  :: t2(dim_list_inact_orb, dim_list_inact_orb, dim_list_virt_orb, dim_list_virt_orb)
  double precision, intent(in)  :: K1(dim_list_inact_orb, dim_list_virt_orb, dim_list_inact_orb, dim_list_virt_orb)
  double precision, intent(out) :: K1a(dim_list_inact_orb, dim_list_inact_orb, dim_list_virt_orb, dim_list_virt_orb)

  integer :: i,j,k,l,a,b,c,d
  integer :: nO, nV

  nO = dim_list_inact_orb
  nV = dim_list_virt_orb

  double precision, allocatable :: tmp_K1(:,:,:,:), tmp_t2(:,:,:,:), accu(:,:,:,:)

  allocate(tmp_K1(nO,nV,nO,nV), tmp_t2(nO,nV,nO,nV), accu(nO,nV,nO,nV))

  do c = 1, nV
    do k = 1, nO
      do a = 1, nV
        do i = 1, nO
          tmp_k1(i,a,k,c) = K1(i,c,k,a)
        enddo
      enddo
    enddo
  enddo

  do b = 1, nV
    do j = 1, nO
      do c = 1, nV
        do k = 1, nO
           tmp_t2(k,c,j,b) = t2(k,j,c,b)
         enddo
      enddo
    enddo
  enddo  

  ! K1a_{ij}^{ab} = \sum_{ck} K1_{ic}^{ka} * t2_{kj}^{cb}
  !K1a = 0d0
  !do b = 1, nV
  !  do a = 1, nV
  !    do j = 1, nO
  !      do i = 1, nO
  !        do k = 1, nO
  !          do c = 1, nV
  !            !K1a(i,j,a,b) = K1a(i,j,a,b) + K1(i,c,k,a) * t2(k,j,c,b)
  !            K1a(i,j,a,b) = K1a(i,j,a,b) + tmp_k1(i,a,k,c) * tmp_t2(k,c,j,b)
  !          enddo
  !        enddo
  !      enddo
  !    enddo
  !  enddo
  !enddo
  
  call dgemm('N','N', nO*nV, nO*nV, nO*nV, &
             1d0, tmp_K1, size(tmp_K1,1) * size(tmp_K1,2), &
             tmp_t2, size(tmp_t2,1) * size(tmp_t2,2), &
             0d0, accu, size(accu,1) * size(accu,2))

  do b = 1, nV
    do a = 1, nV
      do j = 1, nO
        do i = 1, nO
          K1a(i,j,a,b) = accu(i,a,j,b)
        enddo
      enddo
    enddo
  enddo
        
  deallocate(tmp_K1,tmp_t2,accu)

end
#+END_SRC

** K1b
\begin{align*}
K1b_{ij}^{ab} = \sum_{kc} K1_{jc}^{kb} t2_{ki}^{ca}
\end{align*}

#+BEGIN_SRC f90 :comments org :tangle space_orb_ccd.irp.f
subroutine space_ccd_K1b(t2,K1,K1b)

  implicit none

  double precision, intent(in)  :: t2(dim_list_inact_orb, dim_list_inact_orb, dim_list_virt_orb, dim_list_virt_orb)
  double precision, intent(in)  :: K1(dim_list_inact_orb, dim_list_virt_orb, dim_list_inact_orb, dim_list_virt_orb)
  double precision, intent(out) :: K1b(dim_list_inact_orb, dim_list_inact_orb, dim_list_virt_orb, dim_list_virt_orb)

  integer :: i,j,k,l,a,b,c,d
  integer :: nO, nV

  nO = dim_list_inact_orb
  nV = dim_list_virt_orb

  double precision, allocatable :: tmp_K1(:,:,:,:), tmp_t2(:,:,:,:), accu(:,:,:,:)

  allocate(tmp_K1(nO,nV,nO,nV), tmp_t2(nO,nV,nO,nV), accu(nO,nV,nO,nV))

  do c = 1, nV
    do k = 1, nO
      do b = 1, nV
        do j = 1, nO
          tmp_k1(j,b,k,c) = K1(j,c,k,b)
        enddo
      enddo
    enddo
  enddo

  do a = 1, nV
    do i = 1, nO
      do c = 1, nV
        do k = 1, nO
           tmp_t2(k,c,i,a) = t2(k,i,c,a)
         enddo
      enddo
    enddo
  enddo  

  ! K1b_{ij}^{ab} = \sum_{kc} K1_{jc}^{kb} t2_{ki}^{ca}
  !K1b = 0d0
  !do b = 1, nV
  !  do a = 1, nV
  !    do j = 1, nO
  !      do i = 1, nO
  !        do k = 1, nO
  !          do c = 1, nV
  !            !K1b(i,j,a,b) = K1b(i,j,a,b) + K1(j,c,k,b) * t2(k,i,c,a)
  !            K1b(i,j,a,b) = K1b(i,j,a,b) + tmp_k1(j,b,k,c) * tmp_t2(k,c,i,a)
  !          enddo
  !        enddo
  !      enddo
  !    enddo
  !  enddo
  !enddo
  
  call dgemm('N','N', nO*nV, nO*nV, nO*nV, &
             1d0, tmp_K1, size(tmp_K1,1) * size(tmp_K1,2), &
             tmp_t2, size(tmp_t2,1) * size(tmp_t2,2), &
             0d0, accu, size(accu,1) * size(accu,2))

  do b = 1, nV
    do a = 1, nV
      do j = 1, nO
        do i = 1, nO
          K1b(i,j,a,b) = accu(j,b,i,a)
        enddo
      enddo
    enddo
  enddo
        
  deallocate(tmp_K1,tmp_t2,accu)

end
#+END_SRC

** K1c
\begin{align*}
K1c_{ij}^{ab} = \sum_{kc} K1_{ic}^{kb} t2_{kj}^{ac}
\end{align*}

#+BEGIN_SRC f90 :comments org :tangle space_orb_ccd.irp.f
subroutine space_ccd_K1c(t2,K1,K1c)

  implicit none

  double precision, intent(in)  :: t2(dim_list_inact_orb, dim_list_inact_orb, dim_list_virt_orb, dim_list_virt_orb)
  double precision, intent(in)  :: K1(dim_list_inact_orb, dim_list_virt_orb, dim_list_inact_orb, dim_list_virt_orb)
  double precision, intent(out) :: K1c(dim_list_inact_orb, dim_list_inact_orb, dim_list_virt_orb, dim_list_virt_orb)

  integer :: i,j,k,l,a,b,c,d
  integer :: nO, nV

  nO = dim_list_inact_orb
  nV = dim_list_virt_orb

  double precision, allocatable :: tmp_K1(:,:,:,:), tmp_t2(:,:,:,:), accu(:,:,:,:)

  allocate(tmp_K1(nO,nV,nO,nV), tmp_t2(nO,nV,nO,nV), accu(nO,nV,nO,nV))

  do c = 1, nV
    do k = 1, nO
      do b = 1, nV
        do i = 1, nO
          tmp_k1(i,b,k,c) = K1(i,c,k,b)
        enddo
      enddo
    enddo
  enddo

  do a = 1, nV
    do j = 1, nO
      do c = 1, nV
        do k = 1, nO
           tmp_t2(k,c,j,a) = t2(k,j,a,c)
         enddo
      enddo
    enddo
  enddo  

  ! K1c_{ij}^{ab} = \sum_{kc} K1_{ic}^{kb} t2_{kj}^{ac}
  !K1c = 0d0
  !do b = 1, nV
  !  do a = 1, nV
  !    do j = 1, nO
  !      do i = 1, nO
  !        do k = 1, nO
  !          do c = 1, nV
  !            !K1c(i,j,a,b) = K1c(i,j,a,b) +  K1(i,c,k,b) * t2(k,j,a,c)
  !            K1c(i,j,a,b) = K1c(i,j,a,b) + tmp_k1(i,b,k,c) * tmp_t2(k,c,j,a)
  !          enddo
  !        enddo
  !      enddo
  !    enddo
  !  enddo
  !enddo
  
  call dgemm('N','N', nO*nV, nO*nV, nO*nV, &
             1d0, tmp_K1, size(tmp_K1,1) * size(tmp_K1,2), &
             tmp_t2, size(tmp_t2,1) * size(tmp_t2,2), &
             0d0, accu, size(accu,1) * size(accu,2))

  do b = 1, nV
    do a = 1, nV
      do j = 1, nO
        do i = 1, nO
          K1c(i,j,a,b) = accu(i,b,j,a)
        enddo
      enddo
    enddo
  enddo
        
  deallocate(tmp_K1,tmp_t2,accu)

end
#+END_SRC

** K1d
\begin{align*}
K1d_{ij}^{ab} = \sum_{kc} K1_{jc}^{ka} t2_{ki}^{bc}
\end{align*}

#+BEGIN_SRC f90 :comments org :tangle space_orb_ccd.irp.f
subroutine space_ccd_K1d(t2,K1,K1d)

  implicit none

  double precision, intent(in)  :: t2(dim_list_inact_orb, dim_list_inact_orb, dim_list_virt_orb, dim_list_virt_orb)
  double precision, intent(in)  :: K1(dim_list_inact_orb, dim_list_virt_orb, dim_list_inact_orb, dim_list_virt_orb)
  double precision, intent(out) :: K1d(dim_list_inact_orb, dim_list_inact_orb, dim_list_virt_orb, dim_list_virt_orb)

  integer :: i,j,k,l,a,b,c,d
  integer :: nO, nV

  nO = dim_list_inact_orb
  nV = dim_list_virt_orb

  double precision, allocatable :: tmp_K1(:,:,:,:), tmp_t2(:,:,:,:), accu(:,:,:,:)

  allocate(tmp_K1(nO,nV,nO,nV), tmp_t2(nO,nV,nO,nV), accu(nO,nV,nO,nV))

  do c = 1, nV
    do k = 1, nO
      do a = 1, nV
        do j = 1, nO
          tmp_k1(j,a,k,c) = K1(j,c,k,a)
        enddo
      enddo
    enddo
  enddo

  do b = 1, nV
    do i = 1, nO
      do c = 1, nV
        do k = 1, nO
           tmp_t2(k,c,i,b) = t2(k,i,b,c)
        enddo
      enddo
    enddo
  enddo  

  ! K1d_{ij}^{ab} = \sum_{kc} K1_{jc}^{ka} t2_{ki}^{bc}
  !K1d = 0d0
  !do b = 1, nV
  !  do a = 1, nV
  !    do j = 1, nO
  !      do i = 1, nO
  !        do k = 1, nO
  !          do c = 1, nV
  !            !K1d(i,j,a,b) = K1d(i,j,a,b) + K1(j,c,k,a) * t2(k,i,b,c)
  !            K1d(i,j,a,b) = K1d(i,j,a,b) + tmp_k1(j,a,k,c) * tmp_t2(k,c,i,b)
  !          enddo
  !        enddo
  !      enddo
  !    enddo
  !  enddo
  !enddo
  
  call dgemm('N','N', nO*nV, nO*nV, nO*nV, &
             1d0, tmp_K1, size(tmp_K1,1) * size(tmp_K1,2), &
             tmp_t2, size(tmp_t2,1) * size(tmp_t2,2), &
             0d0, accu, size(accu,1) * size(accu,2))

  do b = 1, nV
    do a = 1, nV
      do j = 1, nO
        do i = 1, nO
          K1d(i,j,a,b) = accu(j,a,i,b)
        enddo
      enddo
    enddo
  enddo
        
  deallocate(tmp_K1,tmp_t2,accu)

end
#+END_SRC

** Residue
#+BEGIN_SRC f90 :comments org :tangle space_orb_ccd.irp.f
subroutine space_ccd_residue(delta,t2,g_occ,g_vir,J1,K1,r)

  implicit none

  double precision, intent(in)  :: delta(dim_list_inact_orb, dim_list_inact_orb, dim_list_virt_orb, dim_list_virt_orb)
  double precision, intent(in)  :: t2(dim_list_inact_orb, dim_list_inact_orb, dim_list_virt_orb, dim_list_virt_orb)
  double precision, intent(in)  :: g_occ(dim_list_inact_orb, dim_list_inact_orb)
  double precision, intent(in)  :: g_vir(dim_list_virt_orb, dim_list_virt_orb)
  double precision, intent(in)  :: J1(dim_list_inact_orb, dim_list_virt_orb, dim_list_virt_orb, dim_list_inact_orb)
  double precision, intent(in)  :: K1(dim_list_inact_orb, dim_list_virt_orb, dim_list_inact_orb, dim_list_virt_orb)
  double precision, intent(out) :: r(dim_list_inact_orb, dim_list_inact_orb, dim_list_virt_orb, dim_list_virt_orb)

  integer :: i,j,k,l,a,b,c,d,tmp_a,tmp_b,tmp_c,tmp_d
  integer :: nO, nV

  double precision, allocatable :: X1(:,:,:,:), X2(:,:,:,:), X3(:,:,:,:)
  double precision, allocatable :: G1(:,:,:,:), G2(:,:,:,:), G3(:,:,:,:), G4(:,:,:,:)
  double precision, allocatable :: J1a(:,:,:,:), J1b(:,:,:,:)
  double precision, allocatable :: K1a(:,:,:,:), K1b(:,:,:,:), K1c(:,:,:,:), K1d(:,:,:,:)
  
  nO = dim_list_inact_orb
  nV = dim_list_virt_orb

  allocate(X1(nO,nO,nV,nV), X2(nO,nO,nV,nV), X3(nO,nO,nV,nV))
  allocate(G1(nO,nO,nV,nV), G2(nO,nO,nV,nV))
  allocate(G3(nO,nO,nV,nV), G4(nO,nO,nV,nV))
  allocate(J1a(nO,nO,nV,nV), J1b(nO,nO,nV,nV))
  allocate(K1a(nO,nO,nV,nV), K1b(nO,nO,nV,nV))
  allocate(K1c(nO,nO,nV,nV), K1d(nO,nO,nV,nV))

  call space_ccd_X1(t2,X1)
  call space_ccd_X2(t2,X2)
  call space_ccd_X3(t2,X3)
  call space_ccd_G1(t2,g_occ,G1)
  call space_ccd_G2(t2,g_occ,G2)
  call space_ccd_G3(t2,g_vir,G3)
  call space_ccd_G4(t2,g_vir,G4)
  call space_ccd_J1a(t2,J1,J1a)
  call space_ccd_J1b(t2,J1,J1b)
  call space_ccd_K1a(t2,K1,K1a)
  call space_ccd_K1b(t2,K1,K1b)
  call space_ccd_K1c(t2,K1,K1c)
  call space_ccd_K1d(t2,K1,K1d) 
  
  r = 0d0 

  ! Residue
  do b = 1, nV
    do a = 1, nV
      do j = 1, nO
        do i = 1, nO

          r(i,j,a,b) = r(i,j,a,b) &
          + vcc_oovv(i,j,a,b)

          ! X1
          r(i,j,a,b) = r(i,j,a,b) + X1(i,j,a,b)
          !do l = 1, nO
          !  do k = 1, nO
          !    r(i,j,a,b) = r(i,j,a,b) &
          !    + v_oooo(i,j,k,l) * t2(k,l,a,b)
          !  enddo
          !enddo

          ! X2
          r(i,j,a,b) = r(i,j,a,b) + X2(i,j,a,b)
          !do d = 1, nV
          !  tmp_d = d + nO
          !  do c = 1, nV
          !    tmp_c = c + nO
          !    r(i,j,a,b) = r(i,j,a,b) &
          !    + v_vvvv(c,d,a,b) * t2(i,j,c,d)
          !  enddo
          !enddo

          ! X3
          r(i,j,a,b) = r(i,j,a,b) + X3(i,j,a,b)
          !do d = 1, nV
          !  tmp_d = d + nO
          !  do c = 1, nV
          !    tmp_c = c + nO
          !    do l = 1, nO
          !      do k = 1, nO
          !        r(i,j,a,b) = r(i,j,a,b) &
          !        + v_vvoo(c,d,k,l) * t2(i,j,c,d) * t2(k,l,a,b)
          !      enddo
          !    enddo
          !  enddo
          !enddo

          ! G3, G4
          r(i,j,a,b) = r(i,j,a,b) + G3(i,j,a,b) + G4(i,j,a,b)
          !do c = 1, nV
          !  tmp_c = c + nO
          !  r(i,j,a,b) = r(i,j,a,b) &
          !  + g_vir(c,a) * t2(i,j,c,b) & ! G3
          !  + g_vir(c,b) * t2(j,i,c,a)   ! G4
          !enddo

          ! G1, G2
          r(i,j,a,b) = r(i,j,a,b) - G1(i,j,a,b) - G2(i,j,a,b)
          !do k = 1, nO
          !  r(i,j,a,b) = r(i,j,a,b) &
          !  - g_occ(i,k) * t2(k,j,a,b) ! G1
          !  - g_occ(j,k) * t2(k,i,b,a) ! G2
          !enddo

          ! J1a, J1b, K1a, K1b, K1c, K1d
          r(i,j,a,b) = r(i,j,a,b) &
          + J1a(i,j,a,b) + J1b(i,j,a,b) &
          - K1a(i,j,a,b) - k1b(i,j,a,b) &
          - K1c(i,j,a,b) - K1d(i,j,a,b)
          !do c = 1, nV
          !  tmp_c = c + nO
          !  do k = 1, nO
          !    r(i,j,a,b) = r(i,j,a,b) &
          !    + J1(i,c,a,k) * (2d0 * t2(k,j,c,b) - t2(k,j,b,c)) & ! J1a
          !    + J1(j,c,b,k) * (2d0 * t2(k,i,c,a) - t2(k,i,a,c)) & ! J1b
          !    - K1(i,c,k,a) * t2(k,j,c,b) & ! K1a
          !    - K1(j,c,k,b) * t2(k,i,c,a) & ! K1b
          !    - K1(i,c,k,b) * t2(k,j,a,c) & ! K1c
          !    - K1(j,c,k,a) * t2(k,i,b,c)   ! K1d
          !  enddo
          !enddo
         
        enddo
      enddo
    enddo
  enddo

  deallocate(X1,X2,X3)
  deallocate(G1,G2,G3,G4)
  deallocate(J1a,J1b,K1a,K1b,K1c,K1d)
  
end
#+END_SRC

** g_occ
\begin{align*}
Gocc_i^k = foo_i^k + \sum_{lcd} t2_{il}^{cd} * tmpW_{lc}^{dk}
\end{align*}

#+BEGIN_SRC f90 :comments org :tangle space_orb_ccd.irp.f
subroutine space_ccd_g_occ(t2,g_occ)

  implicit none

  double precision, intent(in)  :: t2(dim_list_inact_orb, dim_list_inact_orb, dim_list_virt_orb, dim_list_virt_orb)
  double precision, intent(out) :: g_occ(dim_list_inact_orb, dim_list_inact_orb)

  integer :: i,j,k,l,c,d,tmp_c,tmp_d
  integer :: nO,nV

  double precision, allocatable :: tmp_w(:,:,:,:)
  
  nO = dim_list_inact_orb
  nV = dim_list_virt_orb

  allocate(tmp_w(nO,nV,nV,nO))

  do k = 1, nO
    do d = 1, nV
      do c = 1, nV
        do l = 1, nO
          tmp_w(l,c,d,k) = wcc_vvoo(c,d,k,l)
        enddo
      enddo
    enddo
  enddo

  ! Gocc_i^k = foo_i^k + \sum_{lcd} t2_{il}^{cd} * tmpW_{lc}^{dk}
  !g_occ = 0d0
  !do k = 1, nO
  !  do i = 1, nO

  !    g_occ(i,k) = g_occ(i,k) + fock_matrix_mo(i,k)

  !    do d = 1, nV
  !      tmp_d = d + nO
  !      do c = 1, nV
  !        tmp_c = c + nO
  !        do l = 1, nO
  !          g_occ(i,k) = g_occ(i,k) &
  !          + t2(i,l,c,d) * tmp_w(l,c,d,k)
  !          !+ wcc_vvoo(c,d,k,l) * t2(i,l,c,d)
  !          !!+ (2d0 * two_e_ints(tmp_c,tmp_d,k,l) - two_e_ints(tmp_c,tmp_d,l,k)) * t2(i,l,c,d)
  !        enddo
  !      enddo
  !    enddo
  !    
  !  enddo
  !enddo

  do k = 1, nO
    do i = 1, nO
      g_occ(i,k) = fcc_oo(i,k)
    enddo
  enddo
  
  call dgemm('N','N', nO, nO, nO*nV*nV, &
             1d0, t2, size(t2,1), &
             tmp_W, size(tmp_w,1) * size(tmp_w,2) * size(tmp_w,3), &
             1d0, g_occ, size(g_occ,1))
  
  deallocate(tmp_W)
  
end
#+END_SRC

** g_vir
\begin{align*}
Gvir_c^a = fvv_c^a - \sum_{d,k,l} Wvvoo_{cd}^{kl} tmpt2_{dk}^{la}
\end{align*}

#+BEGIN_SRC f90 :comments org :tangle space_orb_ccd.irp.f
subroutine space_ccd_g_vir(t2,g_vir)

  implicit none

  double precision, intent(in)  :: t2(dim_list_inact_orb, dim_list_inact_orb, dim_list_virt_orb, dim_list_virt_orb)
  double precision, intent(out) :: g_vir(dim_list_virt_orb, dim_list_virt_orb)

  integer :: a,tmp_a,k,l,c,d,tmp_c,tmp_d
  integer :: nO,nV

  double precision, allocatable :: tmp_t2(:,:,:,:)
  
  nO = dim_list_inact_orb
  nV = dim_list_virt_orb

  allocate(tmp_t2(nV,nO,nO,nV))

  do a = 1, nV
    do l = 1, nO
      do k = 1, nO
        do d = 1, nV
          tmp_t2(d,k,l,a) =  t2(k,l,a,d)
        enddo
      enddo
    enddo
  enddo

  ! Gvir_c^a = fvv_c^a - \sum_{d,k,l} Wvvoo_{cd}^{kl} tmpt2_{dk}^{la}
  !g_vir = 0d0
  !do a = 1, nV
  !  tmp_a = a + nO
  !  do c = 1, nV
  !    tmp_c = c + nO

  !    g_vir(c,a) = g_vir(c,a) + fock_matrix_mo(tmp_c,tmp_a)

  !    do d = 1, nV
  !      tmp_d = d + nO
  !      do l = 1, nO
  !        do k = 1, nO
  !          g_vir(c,a) = g_vir(c,a) &
  !          - wcc_vvoo(c,d,k,l) * tmp_t2(d,k,l,a)
  !          !- wcc_vvoo(c,d,k,l) * t2(k,l,a,d)
  !          !!- (2d0 * two_e_ints(tmp_c,tmp_d,k,l) - two_e_ints(tmp_c,tmp_d,l,k)) * t2(k,l,a,d)
  !        enddo
  !      enddo
  !    enddo
  !    
  !  enddo
  !enddo

  do a = 1, nV
    do c = 1, nV
      g_vir(c,a) = fcc_vv(c,a)
    enddo
  enddo

  call dgemm('N','N', nV, nV, nV*nO*nO, &
             -1d0, wcc_vvoo, size(wcc_vvoo,1), &
             tmp_t2, size(tmp_t2,1) * size(tmp_t2,2) * size(tmp_t2,3), &
             1d0, g_vir, size(g_vir,1))

  deallocate(tmp_t2)
  
end
#+END_SRC

** J1
\begin{align*}
J1(i,c,a,k) = Vovvo_{ic}^{ak} \sum_{dl} - 0.5 Vvvoo_{cd}^{kl} t2{il}^{da} + 0.5 Wvvoo_{cd}^{kl} t2_{il}^{ad}
\end{align*}

#+BEGIN_SRC f90 :comments org :tangle space_orb_ccd.irp.f
subroutine space_ccd_J1(t2,J1)

  implicit none

  double precision, intent(in)  :: t2(dim_list_inact_orb, dim_list_inact_orb, dim_list_virt_orb, dim_list_virt_orb)
  double precision, intent(out) :: J1(dim_list_inact_orb, dim_list_virt_orb, dim_list_virt_orb, dim_list_inact_orb)

  integer :: a,tmp_a,k,l,c,d,tmp_c,tmp_d,i,j
  integer :: nO,nV

  double precision, allocatable :: tmp_v(:,:,:,:), tmp_w(:,:,:,:)
  double precision, allocatable :: tmp_t2_1(:,:,:,:), tmp_t2_2(:,:,:,:), accu(:,:,:,:)

  nO = dim_list_inact_orb
  nV = dim_list_virt_orb

  allocate(tmp_v(nV,nO,nV,nO), tmp_w(nV,nO,nV,nO))
  allocate(tmp_t2_1(nV,nO,nO,nV), tmp_t2_2(nV,nO,nO,nV))
  allocate(accu(nV,nO,nO,nV))

  do l = 1, nO
    do d = 1, nV
      do k = 1, nO
        do c = 1, nV
          tmp_v(c,k,d,l) = 0.5d0 * vcc_vvoo(c,d,k,l)
        enddo
      enddo
    enddo
  enddo
  
  do a = 1, nV
    do i = 1, nO
      do l = 1, nO
        do d = 1, nV
          tmp_t2_1(d,l,i,a) = t2(i,l,d,a)
        enddo
      enddo
    enddo
  enddo

  do l = 1, nO
    do d = 1, nV
      do k = 1, nO
        do c = 1, nV
          tmp_w(c,k,d,l) = 0.5d0 * wcc_vvoo(c,d,k,l)
        enddo
      enddo
    enddo
  enddo

   do a = 1, nV
    do i = 1, nO
      do l = 1, nO
        do d = 1, nV
          tmp_t2_2(d,l,i,a) = t2(i,l,a,d)
        enddo
      enddo
    enddo
  enddo
  
  ! J1(i,c,a,k) = Vovvo_{ic}^{ak} + \sum_{dl} - 0.5 Vvvoo_{cd}^{kl} t2{il}^{da} + 0.5 Wvvoo_{cd}^{kl} t2_{il}^{ad}
  !J1 = 0d0
  !do k = 1, nO
  !  do a = 1, nV
  !    do c = 1, nV
  !      do i = 1, nO
  !        J1(i,c,a,k) = J1(i,c,a,k) &
  !        + v_ovvo(i,c,a,k)
  !        !!+ two_e_ints(i,tmp_c,tmp_a,k)

  !        do d = 1, nV
  !          do l = 1, nO
  !            J1(i,c,a,k) = J1(i,c,a,k) &
  !            - tmp_v(c,k,d,l) * tmp_t2_1(d,l,i,a) &
  !            + tmp_w(c,k,d,l) * tmp_t2_2(d,l,i,a)
  !            !- 0.5d0 * v_vvoo(c,d,k,l) * t2(i,l,d,a) &
  !            !+ 0.5d0 * wcc_vvoo(c,d,k,l) * t2(i,l,a,d)
  !            
  !            
  !            !!- 0.5d0 * two_e_ints(tmp_c,tmp_d,k,l) * t2(i,l,d,a) &
  !            !!+ 0.5d0 * (2d0 * two_e_ints(tmp_c,tmp_d,k,l) - two_e_ints(tmp_c,tmp_d,l,k)) * t2(i,l,a,d)
  !          enddo
  !        enddo

  !      enddo
  !    enddo
  !  enddo
  !enddo

  call dgemm('N','N', nV*nO, nV*nO, nO*nV, &
             -1d0, tmp_v, size(tmp_v,1) * size(tmp_v,2), &
             tmp_t2_1, size(tmp_t2_1,1) * size(tmp_t2_1,2), &
             0d0, accu, size(accu,1) * size(accu,2))

  call dgemm('N','N', nV*nO, nV*nO, nO*nV, &
             1d0, tmp_w, size(tmp_w,1) * size(tmp_w,2), &
             tmp_t2_2, size(tmp_t2_2,1) * size(tmp_t2_2,2), &
             1d0, accu, size(accu,1) * size(accu,2))

  do k = 1, nO
    do a = 1, nV
      do c = 1, nV
        do i = 1, nO
          J1(i,c,a,k) = accu(c,k,i,a) + vcc_ovvo(i,c,a,k)
        enddo
      enddo
    enddo
  enddo
  
  deallocate(tmp_v,tmp_w,tmp_t2_1,tmp_t2_2,accu) 
  
end
#+END_SRC

** K1
\begin{align*}
K1_{ic}^{ka} = Vovov_{ic}^{ka} - 0.5 \sum_{dl} Vvvoo_{dc}^{kl} t2_{il}^{da}
\end{align*}
#+BEGIN_SRC f90 :comments org :tangle space_orb_ccd.irp.f
subroutine space_ccd_K1(t2,K1)

  implicit none

  double precision, intent(in)  :: t2(dim_list_inact_orb, dim_list_inact_orb, dim_list_virt_orb, dim_list_virt_orb)
  double precision, intent(out) :: K1(dim_list_inact_orb, dim_list_virt_orb, dim_list_inact_orb, dim_list_virt_orb)

  integer :: a,tmp_a,k,l,c,d,tmp_c,tmp_d,i,j
  integer :: nO,nV

  double precision, allocatable :: tmp_v(:,:,:,:), tmp_t2(:,:,:,:), accu(:,:,:,:)
  
  nO = dim_list_inact_orb
  nV = dim_list_virt_orb

  allocate(tmp_v(nV,nO,nV,nO),tmp_t2(nV,nO,nO,nV),accu(nV,nO,nO,nV))

  do l = 1, nO
    do d = 1, nV
      do k = 1, nO
        do c = 1, nV
          tmp_v(c,k,d,l) = 0.5d0 * vcc_vvoo(d,c,k,l)
        enddo
      enddo
    enddo
  enddo

  do a = 1, nV
    do i = 1, nO
      do l = 1, nO
        do d = 1, nV
          tmp_t2(d,l,i,a) = t2(i,l,d,a)
        enddo
      enddo
    enddo
  enddo

  ! K1_{ic}^{ka} = Vovov_{ic}^{ka} - 0.5 \sum_{dl} Vvvoo_{dc}^{kl} t2_{il}^{da}
  !K1 = 0d0
  !do a = 1, nV
  !  tmp_a = a + nO
  !  do k = 1, nO
  !    do c = 1, nV
  !      tmp_c = c + nO
  !      do i = 1, nO
  !        K1(i,c,k,a) = K1(i,c,k,a) &
  !        + v_ovov(i,c,k,a)
  !        !+ two_e_ints(i,tmp_c,k,tmp_a)

  !        do d = 1, nV
  !          tmp_d = d + nO
  !          do l = 1, nO
  !            K1(i,c,k,a) = K1(i,c,k,a) &
  !            - tmp_v(c,k,d,l) * tmp_t2(d,l,i,a)
  !            !- 0.5d0 * v_vvoo(d,c,k,l) * t2(i,l,d,a)
  !            !!- 0.5d0 * two_e_ints(tmp_d,tmp_c,k,l) * t2(i,l,d,a)
  !          enddo
  !        enddo

  !      enddo
  !    enddo
  !  enddo
  !enddo

  call dgemm('N','N', nV*nO, nO*nV, nV*nO, &
             -1d0, tmp_v, size(tmp_v,1) * size(tmp_v,2), &
             tmp_t2, size(tmp_t2,1) * size(tmp_t2,2), &
             0d0, accu, size(accu,1) * size(accu,2))

  do a = 1, nV
    do k = 1, nO
      do c = 1, nV
        do i = 1, nO
          K1(i,c,k,a) = vcc_ovov(i,c,k,a) + accu(c,k,i,a)
        enddo
      enddo
    enddo
  enddo

  deallocate(tmp_v,tmp_t2,accu)
  
end
#+END_SRC

