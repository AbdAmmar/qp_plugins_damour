* First space orb ccd
Scuseria, Gustavo E.; Janssen, Curtis L.; Schaefer, Henry
F. (1988). An efficient reformulation of the closed-shell coupled
cluster single and double excitation (CCSD) equations. The Journal of
Chemical Physics, 89(12), 7382â€“. doi:10.1063/1.455269

\begin{align*}
r_{ij}^{ab} &= v_{ij}^{ab} + \sum_{kl} v_{ij}^{kl} t_{kl}^{ab} + \sum_{cd} v_{cd}^{ab} t_{ij}^{cd} \\
&+ \sum_{klcd} v_{cd}^{kl} t_{ij}^{cd} t_{kl}^{ab} \\
&+ \Omega_{ij}^{ab} [g_c^a t_{ij}^{cb} - g_i^k t_{kj}^{ab} + j_{ic}^{ak}(2 t_{kj}^{cb} - t_{kj}^{bc}) - k_{ic}^{ka} t_{kj}^{cb} - k_{ic}^{kb} t_{kj}^{ac}]
\end{align*}

** Code

#+BEGIN_SRC f90 :comments org :tangle first_space_orb_ccd.irp.f
program first_space_orb_ccd
  
  implicit none

  integer :: i,j,k,l,a,b,c,d,tmp_a,tmp_b,tmp_c,tmp_d
  integer :: nO, nV
  integer :: nb_iter
  double precision :: get_two_e_integral
  double precision :: energy, max_elem
  logical :: not_converged

  double precision, allocatable :: t2(:,:,:,:), r(:,:,:,:), delta(:,:,:,:)
  double precision, allocatable :: g_occ(:,:), g_vir(:,:), the_J(:,:,:,:), the_K(:,:,:,:)

  if (elec_alpha_num /= elec_beta_num) then
    print*,'elec_alpha_num /= elec_beta_num'
    print*,'abort'
    call abort
  endif

  if (n_inact_orb == 0 .or. n_virt_orb == 0) then
    print*,'Set the mo_classes -> core, ininactive, virtual'
    print*,'abort'
    call abort
  endif
  
  nO = n_inact_orb
  nV = n_virt_orb
  
  allocate(t2(nO,nO,nV,nV), r(nO,nO,nV,nV), delta(nO,nO,nV,nV))
  allocate(g_occ(nO,nO), g_vir(nV,nV))
  allocate(the_J(nO,nV,nV,nO), the_K(nO,nV,nO,nV))
  
  PROVIDE mo_two_e_integrals_in_map

  print*,'hf_energy', hf_energy

  ! Delta
  do b = 1, nV
    do a = 1, nV
      do j = 1, nO
        do i = 1, nO
          
          delta(i,j,a,b) = (fcc_vv(a,a) + fcc_vv(b,b)&
                          - fcc_oo(i,i) - fcc_oo(j,j))
        enddo
      enddo
    enddo
  enddo

  ! Guess t2
  do b = 1, nV
    do a = 1, nV
      do j = 1, nO
        do i = 1, nO
          t2(i,j,a,b) = - vcc_oovv(i,j,a,b)/delta(i,j,a,b)
        enddo
      enddo
    enddo
  enddo

  nb_iter = 0
  max_elem = 1d0
  do while (dabs(max_elem) > 1d-6)
  
    ! energy
    energy = 0d0
    do b = 1, nV
      do a = 1, nV
        do j = 1, nO
          do i = 1, nO
            energy = energy + t2(i,j,a,b) * (2d0 * vcc_oovv(i,j,a,b) - vcc_oovv(i,j,b,a))
          enddo
        enddo
      enddo
    enddo
    energy = energy + hf_energy
    print*, 'E_CCD', energy

    call compute_g_occ(t2,g_occ)
    call compute_g_vir(t2,g_vir)
    call compute_j(t2,the_J)
    call compute_k(t2,the_K)

    ! Residual
    r = 0d0
    do b = 1, nV
      do a = 1, nV
        do j = 1, nO
          do i = 1, nO

            r(i,j,a,b) = r(i,j,a,b) &
            + vcc_oovv(i,j,a,b)

            do l = 1, nO
              do k = 1, nO
                r(i,j,a,b) = r(i,j,a,b) &
                + vcc_oooo(i,j,k,l) * t2(k,l,a,b)
              enddo
            enddo

            do d = 1, nV
              do c = 1, nV
                r(i,j,a,b) = r(i,j,a,b) &
                + vcc_vvvv(c,d,a,b) * t2(i,j,c,d)
              enddo
            enddo

             do d = 1, nV
              do c = 1, nV
                do l = 1, nO
                  do k = 1, nO
                    r(i,j,a,b) = r(i,j,a,b) &
                    + vcc_vvoo(c,d,k,l) * t2(i,j,c,d) * t2(k,l,a,b)
                  enddo
                enddo
              enddo
            enddo

            do c = 1, nV
              r(i,j,a,b) = r(i,j,a,b) &
              + g_vir(c,a) * t2(i,j,c,b) + g_vir(c,b) * t2(j,i,c,a)
            enddo

            do k = 1, nO
              r(i,j,a,b) = r(i,j,a,b) &
              - g_occ(i,k) * t2(k,j,a,b) - g_occ(j,k) * t2(k,i,b,a)
            enddo

            do c = 1, nV
              do k = 1, nO
                r(i,j,a,b) = r(i,j,a,b) &
                + the_J(i,c,a,k) * (2d0 * t2(k,j,c,b) - t2(k,j,b,c)) &
                + the_J(j,c,b,k) * (2d0 * t2(k,i,c,a) - t2(k,i,a,c)) &
                - the_K(i,c,k,a) * t2(k,j,c,b) &
                - the_K(j,c,k,b) * t2(k,i,c,a) &
                - the_K(i,c,k,b) * t2(k,j,a,c) &
                - the_K(j,c,k,a) * t2(k,i,b,c)
              enddo
            enddo
           
          enddo
        enddo
      enddo
    enddo

    max_elem = 0d0
    do b = 1, nV
      do a = 1, nV
        do j = 1, nO
          do i = 1, nO
            if (max_elem < dabs(r(i,j,a,b))) then
              max_elem = dabs(r(i,j,a,b))
            endif
          enddo
        enddo
      enddo
    enddo
    print*,'max', max_elem

    ! Update t2
    do b = 1, nV
      do a = 1, nV
        do j = 1, nO
          do i = 1, nO
            t2(i,j,a,b) =  t2(i,j,a,b) - r(i,j,a,b) / delta(i,j,a,b)
          enddo
        enddo
      enddo
    enddo

    nb_iter = nb_iter + 1
  enddo 

  deallocate(t2,r,delta)
  deallocate(g_occ,g_vir,the_J, the_K)

end
#+END_SRC

#+BEGIN_SRC f90 :comments org :tangle first_space_orb_ccd.irp.f
subroutine compute_g_occ(t2,g_occ)

  implicit none

  double precision, intent(in)  :: t2(dim_list_inact_orb, dim_list_inact_orb, dim_list_virt_orb, dim_list_virt_orb)
  double precision, intent(out) :: g_occ(dim_list_inact_orb, dim_list_inact_orb)

  integer :: i,j,k,l,c,d,tmp_c,tmp_d
  integer :: nO,nV

  nO = dim_list_inact_orb
  nV = dim_list_virt_orb

  g_occ = 0d0
  
  do k = 1, nO
    do i = 1, nO

      g_occ(i,k) = g_occ(i,k) + fcc_oo(i,k)

      do d = 1, nV
        do c = 1, nV
          do l = 1, nO
            g_occ(i,k) = g_occ(i,k) &
            + (2d0 * vcc_vvoo(c,d,k,l) - vcc_vvoo(c,d,l,k)) * t2(i,l,c,d)
          enddo
        enddo
      enddo
      
    enddo
  enddo
  
end
#+END_SRC

#+BEGIN_SRC f90 :comments org :tangle first_space_orb_ccd.irp.f
subroutine compute_g_vir(t2,g_vir)

  implicit none

  double precision, intent(in)  :: t2(dim_list_inact_orb, dim_list_inact_orb, dim_list_virt_orb, dim_list_virt_orb)
  double precision, intent(out) :: g_vir(dim_list_virt_orb, dim_list_virt_orb)

  integer :: a,tmp_a,k,l,c,d,tmp_c,tmp_d
  integer :: nO,nV

  nO = dim_list_inact_orb
  nV = dim_list_virt_orb

  g_vir = 0d0
  
  do a = 1, nV
    do c = 1, nV

      g_vir(c,a) = g_vir(c,a) + fcc_vv(c,a)

      do d = 1, nV
        do l = 1, nO
          do k = 1, nO
            g_vir(c,a) = g_vir(c,a) &
            - (2d0 * vcc_vvoo(c,d,k,l) - vcc_vvoo(c,d,l,k)) * t2(k,l,a,d)
          enddo
        enddo
      enddo
      
    enddo
  enddo
  
end
#+END_SRC

#+BEGIN_SRC f90 :comments org :tangle first_space_orb_ccd.irp.f
subroutine compute_j(t2,the_J)

  implicit none

  double precision, intent(in)  :: t2(dim_list_inact_orb, dim_list_inact_orb, dim_list_virt_orb, dim_list_virt_orb)
  double precision, intent(out) :: the_j(dim_list_inact_orb, dim_list_virt_orb, dim_list_virt_orb, dim_list_inact_orb)

  integer :: a,tmp_a,k,l,c,d,tmp_c,tmp_d,i,j
  integer :: nO,nV

  nO = dim_list_inact_orb
  nV = dim_list_virt_orb

  the_J = 0d0

  do k = 1, nO
    do a = 1, nV
      do c = 1, nV
        do i = 1, nO
          the_J(i,c,a,k) = the_J(i,c,a,k) &
          + vcc_ovvo(i,c,a,k)

          do d = 1, nV
            do l = 1, nO
              the_J(i,c,a,k) = the_J(i,c,a,k) &
              - 0.5d0 * vcc_vvoo(c,d,k,l) * t2(i,l,d,a) &
              + 0.5d0 * (2d0 * vcc_vvoo(c,d,k,l) - vcc_vvoo(c,d,l,k)) * t2(i,l,a,d)
            enddo
          enddo

        enddo
      enddo
    enddo
  enddo
  
end
#+END_SRC

#+BEGIN_SRC f90 :comments org :tangle first_space_orb_ccd.irp.f
subroutine compute_k(t2,the_K)

  implicit none

  double precision, intent(in)  :: t2(dim_list_inact_orb, dim_list_inact_orb, dim_list_virt_orb, dim_list_virt_orb)
  double precision, intent(out) :: the_K(dim_list_inact_orb, dim_list_virt_orb, dim_list_inact_orb, dim_list_virt_orb)

  integer :: a,tmp_a,k,l,c,d,tmp_c,tmp_d,i,j
  integer :: nO,nV

  nO = dim_list_inact_orb
  nV = dim_list_virt_orb

  the_K = 0d0

  do a = 1, nV
    do k = 1, nO
      do c = 1, nV
        do i = 1, nO
          the_K(i,c,k,a) = the_K(i,c,k,a) &
          + vcc_ovov(i,c,k,a)

          do d = 1, nV
            do l = 1, nO
              the_K(i,c,k,a) = the_K(i,c,k,a) &
              - 0.5d0 * vcc_vvoo(d,c,k,l) * t2(i,l,d,a)
            enddo
          enddo

        enddo
      enddo
    enddo
  enddo
  
end
#+END_SRC
