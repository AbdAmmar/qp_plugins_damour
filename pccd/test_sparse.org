#+BEGIN_SRC f90 :comments org
!:tangle pccd.irp.f
subroutine run_S2pCCD(epsilon,real_e)

  use mkl_spblas
  use iso_c_binding, only :c_int, c_double
  implicit none

  double precision, intent(in) :: epsilon, real_e
  double precision, allocatable :: list_crit(:)
  integer, allocatable :: list_key(:)
  integer, allocatable :: list_2d_key(:,:)
  integer :: i,j,a,b,p,q,nb_t2

  double precision, allocatable :: t2(:,:), residue(:,:), tmp_residue(:,:), list_t2(:), Id(:,:)
  double precision, allocatable :: U1(:), U2(:), U3(:,:), U4(:,:), U5(:,:), X(:,:)
  integer :: nb_iter, info
  double precision :: energy, max_residue, ta, tb, normalization_factor
  logical :: not_converged

  type(sparse_matrix_t) :: sp_t2
  type(matrix_descr) :: descr
  
  integer                       :: nV, nO

  nO = dim_list_act_orb
  nV = dim_list_virt_orb

  print*,''
  print*,'---run_S2pccd---'
  call wall_time(ta)
  
  allocate(t2(nO, nV), residue(nO, nV), tmp_residue(nO, nV))
  allocate(U1(nV), U2(nO), U3(nO, nV))
  allocate(U4(nO, nV), U5(nO, nV), X(nO, nO))

  if (dim_list_act_orb == mo_num) then
     print*,'Set the mo classes before, abort'
     call abort
  endif

  allocate(list_crit(nO*nV), list_key(nO*nV))
  
  ! 2D -> 1D
  p = 1
  do a = 1, nV
    do i = 1, nO
       if (sccd_method == 'bi_int') then
         list_crit(p) = dabs(two_e_ints_iiaa(i,a))
       elseif (sccd_method == 'guess_mp2') then
         list_crit(p) = dabs(two_e_ints_iiaa(i,a)/(2d0 * fcc_v(a) - 2d0 * fcc_o(i)))
       elseif (sccd_method == 'estimated_e') then
         list_crit(p) = dabs(two_e_ints_iiaa(i,a)**2/(2d0 * fcc_v(a) - 2d0 * fcc_o(i)))
       else
          print*,'Nothing to do, abort'
          call abort
       endif
       list_key(p) = p
       p = p + 1
    enddo
  enddo
  ! -, to change the ordering after the sort
  list_crit = - list_crit

  ! Sort by ascending order
  call dsort(list_crit, list_key, dim_list_act_orb * dim_list_virt_orb)
  
  ! Normalization of the biggest criterion
  normalization_factor = 1d0/list_crit(1) !(dim_list_act_orb * dim_list_virt_orb)

  ! Normalized and sorted list
  list_crit = list_crit * normalization_factor

  ! Number of selected elements
  p = 1
  do while ((p <= dim_list_act_orb * dim_list_virt_orb) .and. list_crit(min(p, dim_list_act_orb * dim_list_virt_orb)) >= epsilon)
    p = p + 1
  enddo
  nb_t2 = p - 1 

  ! Debug
  !do p = 1, dim_list_act_orb * dim_list_virt_orb
  !  print*, list_crit(p)
  !enddo
  !print*,'nb',nb_t2
  
  allocate(list_2d_key(nb_t2,2),list_t2(nb_t2))

  ! Row indexes
  do p = 1, nb_t2
    q = list_key(p)
    call index_1d_to_2d(dim_list_act_orb, q, i, a)
    list_2d_key(p,1) = i
  enddo

  ! Column indexes
  do p = 1, nb_t2
    q = list_key(p)
    call index_1d_to_2d(dim_list_act_orb, q, i, a)
    list_2d_key(p,2) = a
  enddo
      
  ! Guess t2
  t2 = 0d0
  do p = 1, nb_t2
     i = list_2d_key(p,1)
     a = list_2d_key(p,2)
     t2(i,a) = two_e_ints_iiaa(i,a) &
        /(2d0 * fcc_v(a) - 2d0 * fcc_o(i))
     !print*,i,a,t2(i,a), t2(i,a)*normalization_factor
     list_t2(p) =  two_e_ints_iiaa(i,a) &
        /(2d0 * fcc_v(a) - 2d0 * fcc_o(i))
  enddo

  ! Sort the t2 by ascending order of indexes
  call sort_2d_key(nb_t2, list_2d_key, list_t2)

!! ### TEST ###
!!  ! list of rows with non-zero elements
!!  list_row = 0
!!  do p = 1, nb_t2
!!    i = list_2d_key(p,1)
!!    tmp_list_row(i) = i
!!  enddo
!!
!!  nb_row = 0
!!  do i = 1, dim_list_act_orb
!!    if (tmp_list_row(i) /= 0) then
!!       nb_row = nb_row + 1
!!    endif
!!  enddo
!!
!!  allocate(list_row(nb_row), nb_val_row(nb_row), list_index_row(nb_row))
!!  j = 1
!!  do i = 1, dim_list_act_orb
!!    if (tmp_list_row(i) /= 0) then
!!      list_row(j) = tmp_list_row(i)
!!      j = j + 1
!!    endif
!!  enddo
!!
!!  ! Number of non-zero elements per row
!!  i = 1
!!  nb_val_row = 0
!!  do p = 1, nb_t2
!!    if (list_2d_key(p,1) == list_row(i)) then
!!      nb_val_row(i) = nb_val_row(i) + 1
!!    else
!!      i = i + 1
!!      nb_val_row(i) = nb_val_row(i) + 1
!!    endif
!!  enddo
!!
!!  ! Index of each row in the vector
!!  list_index_row(1) = 1
!!  do i = 2, nb_row
!!    list_index_row(i) = list_index_row(i-1) + nb_val_row(i-1)
!!  enddo
  
  ! debug
  !do p = 1, nb_t2
  !  i = list_2d_key(p,1)
  !  a = list_2d_key(p,2)
  !  print*, i,a
  !   print*,list_t2(p)
  !enddo
  !call abort

  ! info = mkl_sparse_d_create_coo(A, SPARSE_INDEX_BASE_ONE, rows, cols, nnz, row_indx, col_indx, values)
  !info = mkl_sparse_d_create_coo(sp_t2, SPARSE_INDEX_BASE_ONE, dim_list_act_orb, dim_list_virt_orb, nb_t2, list_2d_key(:,1), list_2d_key(:,2), list_t2)

  !allocate(Id(dim_list_virt_orb,dim_list_virt_orb))
  !Id = 0d0
  !do i = 1, dim_list_virt_orb
  !  Id(i,i) = 1d0
  !enddo
  !print*,'Before'
  !do i = 1, dim_list_act_orb
  !  write(*,'(100(1pE14.5))') t2(i,:)
  !enddo

  !descr%type = SPARSE_MATRIX_TYPE_GENERAL
  ! info = mkl_sparse_d_mm (operation, alpha, A, descr, layout, B, columns, ldb, beta, C, ldc)
  !info = mkl_sparse_d_mm (SPARSE_OPERATION_NON_TRANSPOSE, 1d0, sp_t2, descr, SPARSE_LAYOUT_ROW_MAJOR, Id, dim_list_virt_orb, size(Id,1), 0d0, t2, size(t2,1))
  !deallocate(Id)

  !print*,'After'
  !do i = 1, dim_list_act_orb
  !  write(*,'(100(1pE14.5))') t2(i,:)
  !enddo
  !return
  
  print*,''
  print*,'Epsilon:', epsilon
  print*,'     Nb iter        Energy                  Residue'

  nb_iter = 0
  not_converged = .True.
  
  do while (not_converged)

    t2 = 0d0
    do p = 1, nb_t2
      i = list_2d_key(p,1)
      a = list_2d_key(p,2)
      t2(i,a) = list_t2(p)
    enddo
      
    ! tmp arrays
    call U1_pccd(t2, U1)
    call U2_pccd(t2, U2)
    call U3_sp_pccd(nb_t2, list_2d_key, list_t2, U3)
    call U4_sp_pccd(nb_t2, list_2d_key, list_t2, U4)
    call X_sp_pccd(nb_t2, list_2d_key, list_t2, X)
    call U5_sp_pccd(nb_t2, list_2d_key, list_t2, X, U5)

    ! Residue
    tmp_residue = 0d0
    do a = 1, nV
      do i = 1, nO
         tmp_residue(i,a) = two_e_ints_iiaa(i,a) + 2d0*(fcc_v(a) - fcc_o(i) - U1(a) - U2(i)) * t2(i,a) &
              - 2d0*(2d0 * two_e_ints_iaia(i,a) - two_e_ints_aiia(a,i) - two_e_ints_aaii(a,i) * t2(i,a)) * t2(i,a) &
              + U3(i,a) + U4(i,a) + U5(i,a)
         !print*,'r',i,a,tmp_residue(i,a)
      enddo
    enddo

    ! Put to 0 the non selected amplitudes
    residue = 0d0
    do p = 1, nb_t2
      i = list_2d_key(p,1)
      a = list_2d_key(p,2)
      residue(i,a) = tmp_residue(i,a)
    enddo
    
    ! New amplitudes
    call update_amplitudes_pccd(residue, t2)
   
    nb_iter = nb_iter + 1

    ! New energy
    call pCCD_energy(t2,energy)

    ! list of updated amplitudes
    do p = 1, nb_t2
      i = list_2d_key(p,1)
      a = list_2d_key(p,2)
      list_t2(p) = t2(i,a)
    enddo

    ! max element in residue
    max_residue = 0d0
    do a = 1, nV
      do i = 1, nO
        if (dabs(residue(i,a)) > max_residue) then
          max_residue = dabs(residue(i,a))
        endif
      enddo
    enddo
    
    print*, nb_iter, energy, max_residue

    ! Exit criterion
    if (max_residue < 1e-6) then
       not_converged = .False.
       print*,''
       print*,'******************************'
       write(*,'(A7,1pE15.5,I10,1pE15.5,1pE15.5)'),' E_pCCD:', epsilon, nb_t2, energy, energy - real_e
       print*,'******************************' 
    endif

    if (nb_iter >= 100) then
       print*,'#########################'
       print*,'   Convergence failed'
       print*,'#########################'
       exit
    endif

  enddo

  deallocate(t2,residue,tmp_residue,X,U1,U2,U3,U4,U5,list_2d_key,list_key,list_crit,list_t2)

  call wall_time(tb)
  print*,'Time in run_S2pCCD:', tb-ta
  print*,''
  print*,'---End run_S2pCCD---'
  print*,''
  
end
#+END_SRC

#+BEGIN_SRC f90 :comments org
!:tangle idk.irp.f
program test_spblas

  use mkl_spblas
  use iso_c_binding, only :c_int, c_double
  
  implicit none

  integer, parameter :: rows = 4
  integer, parameter :: cols = 6

  integer, parameter :: nnz = 8

  integer :: ia(rows+1), ja(nnz), stat
  real :: values(nnz), x(6), y(4)

  type(sparse_matrix_t) :: a
  type(matrix_descr) :: descr


  ! Matrix example taken from: 
  ! https://en.wikipedia.org/wiki/Sparse_matrix#Compressed_sparse_row_(CSR,_CRS_or_Yale_format)
  !
  !     | 10  20  0  0  0  0 |
  ! A = |  0  30  0 40  0  0 |
  !     |  0   0 50 60 70  0 |
  !     |  0   0  0  0  0 80 | 
 
  ia = [1,3,5,8,9]
  ja = [1,2,2,4,3,4,5,6]
  values = [10, 20, 30, 40, 50, 60, 70, 80]

  stat = mkl_sparse_s_create_csr(a,SPARSE_INDEX_BASE_ONE,rows,cols,ia(1:4),ia(2:5),ja,values)
  print *, "stat create = ", stat

  descr%type = SPARSE_MATRIX_TYPE_GENERAL

  x = [1,1,1,1,1,1]
  stat = mkl_sparse_s_mv(SPARSE_OPERATION_NON_TRANSPOSE,1.0,a,descr,x,0.0,y)
  print *, "stat mv = ", stat

  print *, "result   = ", y
  print *, "expected = ", [30., 70., 180., 80.]

end program
#+END_SRC

** Routines
#+BEGIN_SRC f90 :comments org 
!:tangle pccd.irp.f
subroutine U1_sp_pccd(nb_t2, nb_col, list_index_col, nb_val_col, list_t2, U1)
  
  implicit none

  ! in
  integer, intent(in)           :: nb_t2, nb_col
  double precision, intent(in)  :: list_t2(nb_t2)
  integer, intent(in)           :: list_index_col(nb_col), nb_val_col(nb_col)

  ! out
  double precision, intent(out) :: U1(dim_list_virt_orb)

  ! internal
  integer                       :: j,a

  ! U1(a) = \sum_j t_j^a v_{aa}^{jj}
  call abort ! need the good ordering of t2
  U1 = 0d0
  do a = 1, nb_col
    do j = list_index_col(a), list_index_col(a) + nb_val_col(a)
      U1(a) = U1(a) + list_t2(j) * two_e_ints_aaii(a,j)
    enddo
  enddo

end  
#+END_SRC

#+BEGIN_SRC f90 :comments org 
!:tangle pccd.irp.f
subroutine list_U2_pccd(nb_t2, nb_row, list_index_row, nb_val_row,list_t2, U2)
  
  implicit none

  ! in
  integer, intent(in)           :: nb_t2, nb_row
  double precision, intent(in)  :: list_t2(nb_t2)
  integer, intent(in)           :: list_index_row(nb_row), nb_val_row(nb_row)

  ! out
  double precision, intent(out) :: U2(dim_list_act_orb)

  ! internal
  integer                       :: i,b

  ! U2(i) = \sum_b t_i^b v_{bb}^{ii}
  call abort ! need the good ordering of t2
  U2 = 0d0
  do i = 1, nb_row
    do b = list_index_row(i), list_index_row(i) + nb_val_row(i)
      U2(i) = U2(i) + list_t2(b) * two_e_ints_aaii(b,i)
    enddo
  enddo

end  
#+END_SRC

#+BEGIN_SRC f90 :comments org
!:tangle pccd.irp.f
subroutine U3_sp_pccd(nb_t2, list_2d_key, list_t2, U3)
  
  use mkl_spblas
  use iso_c_binding, only :c_int, c_double
  implicit none

  ! in
  integer, intent(in)           :: nb_t2
  integer, intent(in)           :: list_2d_key(nb_t2,2)
  double precision, intent(in)  :: list_t2(nb_t2)

  ! out
  double precision, intent(out) :: U3(dim_list_act_orb, dim_list_virt_orb)

  ! internal
  integer                       :: i,a,b,info
  type(sparse_matrix_t)         :: sp_t2
  type(matrix_descr)            :: descr

  ! U3(i,a) = \sum_b t_i^b v_{bb}^{aa}
  !U3 = 0d0
  !do a = 1, dim_list_virt_orb
  !  do i = 1, dim_list_act_orb
  !    do b = 1, dim_list_virt_orb
  !       U3(i,a) = U3(i,a) + t2(i,b) * two_e_ints_aabb(b,a)
  !    enddo
  !  enddo
  !enddo
  !call dgemm('N','N', dim_list_act_orb, dim_list_virt_orb, dim_list_virt_orb, &
  !           1d0, t2, size(t2,1), &
  !                two_e_ints_aabb, size(two_e_ints_aabb,1), &
  !           0d0, U3, size(U3,1))

  ! vec -> sparse COO
  info = mkl_sparse_d_create_coo(sp_t2, SPARSE_INDEX_BASE_ONE, dim_list_act_orb, dim_list_virt_orb, nb_t2, list_2d_key(:,1), list_2d_key(:,2), list_t2)
  descr%type = SPARSE_MATRIX_TYPE_GENERAL

  ! Sparse-dense matrix multiplication
  info = mkl_sparse_d_mm(SPARSE_OPERATION_NON_TRANSPOSE, 1d0, sp_t2, descr, SPARSE_LAYOUT_ROW_MAJOR, two_e_ints_aabb, dim_list_virt_orb, size(two_e_ints_aabb,1), 0d0, U3, size(U3,1))

end  
#+END_SRC

#+BEGIN_SRC f90 :comments org
!:tangle pccd.irp.f
subroutine U4_sp_pccd(nb_t2, list_2d_key, list_t2, U4)
  
  use mkl_spblas
  use iso_c_binding, only :c_int, c_double
  implicit none

  ! in
  integer, intent(in)           :: nb_t2
  integer, intent(in)           :: list_2d_key(nb_t2,2)
  double precision, intent(in)  :: list_t2(nb_t2)

  ! out
  double precision, intent(out) :: U4(dim_list_act_orb, dim_list_virt_orb)

  ! internal
  integer                       :: i,j,a,info
  double precision, allocatable :: two_e_ints_iijj_T(:,:), U4_T(:,:)
  type(sparse_matrix_t)         :: sp_t2
  type(matrix_descr)            :: descr

  allocate(two_e_ints_iijj_T(dim_list_act_orb, dim_list_act_orb),U4_T(dim_list_virt_orb, dim_list_act_orb))

  two_e_ints_iijj_T = transpose(two_e_ints_iijj)
  
  ! U4(i,a) = \sum_j t_j^a v_{ii}^{jj}
  !         = \sum_j v_{ii}^{jj} t_j^a
  
  !U4 = 0d0
  !do a = 1, dim_list_virt_orb
  !  do i = 1, dim_list_act_orb
  !    do j = 1, dim_list_act_orb
  !      U4(i,a) = U4(i,a) + t2(j,a) * two_e_ints_iijj(i,j)
  !    enddo
  !  enddo
  !enddo

  !call dgemm('N','N', dim_list_act_orb, dim_list_virt_orb, dim_list_act_orb, &
  !           1d0, two_e_ints_iijj, size(two_e_ints_iijj,1), &
  !                t2, size(t2,1), &
  !           0d0, U4, size(U4,1))

  ! vec -> sparse COO
  info = mkl_sparse_d_create_coo(sp_t2, SPARSE_INDEX_BASE_ONE, dim_list_act_orb, dim_list_virt_orb, nb_t2, list_2d_key(:,1), list_2d_key(:,2), list_t2)
  descr%type = SPARSE_MATRIX_TYPE_GENERAL

  ! Sparse-dense matrix multiplication
  info = mkl_sparse_d_mm(SPARSE_OPERATION_TRANSPOSE, 1d0, sp_t2, descr, SPARSE_LAYOUT_ROW_MAJOR, two_e_ints_iijj_T, dim_list_act_orb, size(two_e_ints_iijj_T,1), 0d0, U4_T, size(U4_T,1))

  U4 = transpose(U4_T)
  
  deallocate(two_e_ints_iijj_T,U4_T)
  
end  
#+END_SRC

#+BEGIN_SRC f90 :comments org
!:tangle pccd.irp.f
subroutine U5_sp_pccd(nb_t2, list_2d_key, list_t2, X, U5)

  use mkl_spblas
  use iso_c_binding, only :c_int, c_double
  implicit none

  ! in
  integer, intent(in)           :: nb_t2
  double precision, intent(in)  :: list_t2(nb_t2)
  integer, intent(in)           :: list_2d_key(nb_t2,2)
  double precision, intent(in)  :: X(dim_list_act_orb, dim_list_act_orb)

  ! out
  double precision, intent(out) :: U5(dim_list_act_orb, dim_list_virt_orb)

  ! internal
  integer                       :: i,j,a,info
  double precision, allocatable :: X_T(:,:), U5_T(:,:)
  type(sparse_matrix_t)         :: sp_t2
  type(matrix_descr)            :: descr

  allocate(X_T(dim_list_act_orb,dim_list_act_orb), U5_T(dim_list_virt_orb, dim_list_act_orb))

  X_T = transpose(X)

  ! U5(i,a) = \sum_{jb} t_j^a t_i^b v_{bb}^{jj}
  !         = \sum_j X(i,j) t_j^a
  !U5 = 0d0
  !do a = 1, dim_list_virt_orb
  !  do i = 1, dim_list_act_orb
  !    do j = 1, dim_list_act_orb
  !      U5(i,a) = U5(i,a) + t2(j,a) * X(i,j)
  !    enddo
  !  enddo
  !enddo

  !call dgemm('N','N', dim_list_act_orb, dim_list_virt_orb, dim_list_act_orb, &
  !           1d0, X, size(X,1), t2, size(t2,1), 0d0, U5, size(U5,1))

  ! vec -> sparse COO
  info = mkl_sparse_d_create_coo(sp_t2, SPARSE_INDEX_BASE_ONE, dim_list_act_orb, dim_list_virt_orb, nb_t2, list_2d_key(:,1), list_2d_key(:,2), list_t2)
  descr%type = SPARSE_MATRIX_TYPE_GENERAL

  ! Sparse-dense matrix multiplication
  info = mkl_sparse_d_mm(SPARSE_OPERATION_TRANSPOSE, 1d0, sp_t2, descr, SPARSE_LAYOUT_ROW_MAJOR, X_T, dim_list_act_orb, size(X_T,1), 0d0, U5_T, size(U5_T,1))

  U5 = transpose(U5_T)

  deallocate(X_T,U5_T)

end  
#+END_SRC

#+BEGIN_SRC f90 :comments org
!:tangle pccd.irp.f
subroutine X_sp_pccd(nb_t2, list_2d_key, list_t2, X)

  use mkl_spblas
  use iso_c_binding, only :c_int, c_double
  implicit none

  ! in
  integer, intent(in)           :: nb_t2
  double precision, intent(in)  :: list_t2(nb_t2)
  integer, intent(in)           :: list_2d_key(nb_t2,2)

  ! out
  double precision, intent(out) :: X(dim_list_act_orb, dim_list_act_orb)

  ! internal
  integer                       :: i,j,b,info
  type(sparse_matrix_t)         :: sp_t2
  type(matrix_descr)            :: descr

  ! X(i,j) = \sum_b t_i^b v_{bb}^{jj}
  ! call dgemm('N','N', dim_list_act_orb, dim_list_act_orb, dim_list_virt_orb, &
  !            1d0, t2, size(t2,1), two_e_ints_aaii, size(two_e_ints_aaii,1), &
  !            0d0, X, size(X,1))

  ! vec -> sparse COO
  info = mkl_sparse_d_create_coo(sp_t2, SPARSE_INDEX_BASE_ONE, dim_list_act_orb, dim_list_virt_orb, nb_t2, list_2d_key(:,1), list_2d_key(:,2), list_t2)
  descr%type = SPARSE_MATRIX_TYPE_GENERAL

  ! Sparse-dense matrix multiplication
  info = mkl_sparse_d_mm(SPARSE_OPERATION_NON_TRANSPOSE, 1d0, sp_t2, descr, SPARSE_LAYOUT_ROW_MAJOR, two_e_ints_aaii, dim_list_act_orb, size(two_e_ints_aaii,1), 0d0, X, size(X,1))
   
end  
#+END_SRC
