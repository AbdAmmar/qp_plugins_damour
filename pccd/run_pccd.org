#+BEGIN_SRC f90 :comments org :tangle run_pccd.irp.f
subroutine run_pccd
  
  implicit none

  BEGIN_DOC
  ! pCCD algorithm
  END_DOC

  double precision, allocatable :: t2(:,:), r2(:,:)
  double precision, allocatable :: U1(:), U2(:), U3(:,:), U4(:,:), U5(:,:), X(:,:), t2_jacobian(:,:,:,:), inv_t2_jacobian(:,:,:,:)
  integer                       :: p,q,i,j,a,b,tmp_a,tmp_b
  integer                       :: nb_iter
  double precision              :: max_r2, ta, tb , energy
  double precision              :: accu1, accu2, accu3, accu4, accu5
  logical                       :: not_converged
  integer                       :: nO, nV

  if (elec_alpha_num /= elec_beta_num) then
     print*,'pCCD is restricted to closed-shell systems'
     print*,'elec_alpha_num /= elec_beta_num, abort'
     call abort
  endif
  
  nO = cc_nOa
  nV = cc_nVa
  
  print*,''
  print*,'---run_pccd---'
  call wall_time(ta)
  
  allocate(t2(nO, nV), r2(nO, nV))
  allocate(U1(nV), U2(nO), U3(nO, nV))
  allocate(U4(nO, nV), U5(nO, nV), X(nO, nO))
  allocate(t2_jacobian(nO, nV, nO, nV))
  allocate(inv_t2_jacobian(nO, nV, nO, nV))

  !call pCCD_energy(t2, energy)
  print*,'HF energy', hf_energy

  call guess_amplitudes_pccd(nO, nV, t2)

  print*,''
  print*,'     Nb iter        Energy                  Residue'

  nb_iter = 0
  not_converged = .True.
  
  do while (not_converged)
     
    ! tmp arrays
    call U1_pccd(nO, nV, t2, U1)
    call U2_pccd(nO, nV, t2, U2)
    call U3_pccd(nO, nV, t2, U3)
    call U4_pccd(nO, nV, t2, U4)
    call X_pccd (nO, nV, t2, X )
    call U5_pccd(nO, nV, t2, X, U5)

    ! Residue
    call r2_pccd(nO, nV, t2, U1, U2, U3, U4, U5, r2)

    ! New amplitudes
    if (pccd_update_t2 == 'full') then
      ! Use the full jacobian to update the amplitudes
      call pccd_jacobian(nO, nV, t2, t2_jacobian)
      call inverse_jacobian(nO, nV, t2_jacobian, inv_t2_jacobian)
      call update_amplitudes_pccd_w_J(nO, nV, r2, inv_t2_jacobian, t2)
    elseif (pccd_update_t2 == 'diag') then
      ! Use the diagonal jacobian to update the amplitudes
      ! TODO
      print*,'Not yet available'
      call abort
    else
      ! Normal update of the amplitudes
      call update_amplitudes_pccd(nO, nV, r2, t2)
    endif
   
    nb_iter = nb_iter + 1

    ! New energy
    call pccd_energy(nO, nV, t2, energy)
    
    ! max element in r2
    max_r2 = 0d0
    do a = 1, nV
      do i = 1, nO
        if (dabs(r2(i,a)) > max_r2) then
          max_r2 = dabs(r2(i,a))
        endif
      enddo
    enddo
    
    print*, nb_iter, energy, max_r2

    ! Exit criterion
    if (max_r2 < cc_thresh_conv) then
       not_converged = .False.
       print*,''
       print*,'******************************'
       print*,' E_pCCD:', energy
       print*,'******************************' 
    endif

    if (nb_iter >= cc_max_iter) then
       print*,'#########################'
       print*,'   Convergence failed'
       print*,'#########################'
       exit
    endif

  enddo

  deallocate(t2,r2,X,U1,U2,U3,U4,U5,t2_jacobian,inv_t2_jacobian)

  call wall_time(tb)
  print*,'Time in run_pccd:', tb-ta
  print*,''
  print*,'---End run_pccd---'
  print*,''
  
end
#+END_SRC
