* Provider for test functions for optimization

** Sphere function
$f(x) = \sum_i**n x_i**2$

#+BEGIN_SRC f90 :comments org :tangle test_functions.irp.f
  BEGIN_PROVIDER [ integer, poly_dim ]
  implicit none
  BEGIN_DOC
  ! poly dim
  END_DOC

  poly_dim = 2

END_PROVIDER
#+END_SRC

#+BEGIN_SRC f90 :comments org :tangle test_functions.irp.f
  BEGIN_PROVIDER [ double precision, x_position, (poly_dim) ]
  implicit none
  BEGIN_DOC
  ! x=(x1,x2,...,xpoly_dim)
  END_DOC

  x_position = 0.1d0
  !call random_number(x_position)
  !x_position = (x_position-0.5d0) * 2d0 * 10d0

END_PROVIDER
#+END_SRC

#+BEGIN_SRC f90 :comments org :tangle test_functions.irp.f
  BEGIN_PROVIDER [ double precision, fx ]
  implicit none
  BEGIN_DOC
  ! f(x) = x**2
  END_DOC

  integer :: i

  fx = 0d0
  do i = 1, poly_dim
    fx = fx + x_position(i)**4
  enddo

END_PROVIDER
#+END_SRC

#+BEGIN_SRC f90 :comments org :tangle test_functions.irp.f
  BEGIN_PROVIDER [ double precision, df, (poly_dim) ]
&BEGIN_PROVIDER [ double precision, ndf ]
  implicit none
  BEGIN_DOC
  ! gradient f(x)=x**2, f'(x) = 2x
  END_DOC
  integer :: i
  
  ndf = 0d0
  do i = 1, poly_dim
    df(i) = 4d0*x_position(i)**3

    if (abs(df(i)) > ndf) then
      ndf = df(i)
    endif
  enddo

END_PROVIDER
#+END_SRC

#+BEGIN_SRC f90 :comments org :tangle test_functions.irp.f
  BEGIN_PROVIDER [ double precision, df2, (poly_dim,poly_dim) ]
  implicit none
  BEGIN_DOC
  ! hessian f(x)=x**2, f''(x)=2
  END_DOC

  integer :: i 
  df2 = 0d0

  do i = 1, poly_dim
    df2(i,i) = 12d0*x_position(i)**2
  enddo
END_PROVIDER
#+END_SRC

** Goldstein-Price function
\begin{align*}
f(x,y) = \left[1+(x+y+1)^2 (19-14x + 3x^2 - 14y + 6xy + 3y^2) \right] \\
\left[ 30 + (2x-3y)^2(18-32x+12x^2+48y-36xy+27y^2\right]
\end{align*}

$f(0,-1) = 3$, $-2 \leq x,y \leq 2$

wxmaxima:
f_gp(x,y):=(1+(x+y+1)^2*(19-14*x+3*x^2+(-14)*y+6*x*y+3*y^2))*
(30+(2*x-3*y)^2*(18-32*x+12*x^2+48*y+(-36)*x*y+27*y^2))

#+BEGIN_SRC f90 :comments org :tangle test_functions.irp.f
  BEGIN_PROVIDER [ double precision, f_gp ]
  implicit none
  BEGIN_DOC
  END_DOC
 
  double precision :: x,y
  x = x_position(1)
  y = x_position(2)

  f_gp = (1+(x+y+1)**2*(19-14*x+3*x**2+(-14)*y+6*x*y+3*y**2))* &
(30+(2*x-3*y)**2*(18-32*x+12*x**2+48*y+(-36)*x*y+27*y**2))

END_PROVIDER
#+END_SRC

#+BEGIN_SRC f90 :comments org :tangle test_functions.irp.f
  BEGIN_PROVIDER [ double precision, df_gp, (2) ]
&BEGIN_PROVIDER [ double precision, cc_gp ]
  implicit none
  BEGIN_DOC
  END_DOC
 
  double precision :: x,y
  x = x_position(1)
  y = x_position(2)

  df_gp(1) = ((y+x+1)**2*(3*y**2+6*x*y-14*y+3*x**2-14*x+19)+1)* &
(4*(2*x-3*y)*(27*y**2-36*x*y+48*y+12*x**2-32*x+18)+(-36*y+24*x-32)*(2*x-3*y)**2)+ &
(2*(y+x+1)*(3*y**2+6*x*y-14*y+3*x**2-14*x+19)+(y+x+1)**2*(6*y+6*x-14))* &
((2*x-3*y)**2*(27*y**2-36*x*y+48*y+12*x**2-32*x+18)+30)

  df_gp(2) = ((y+x+1)**2*(3*y**2+6*x*y-14*y+3*x**2-14*x+19)+1)* &
((2*x-3*y)**2*(54*y-36*x+48)-6*(2*x-3*y)*(27*y**2-36*x*y+48*y+12*x**2-32*x+18))+ &
(2*(y+x+1)*(3*y**2+6*x*y-14*y+3*x**2-14*x+19)+(y+x+1)**2*(6*y+6*x-14))* &
((2*x-3*y)**2*(27*y**2-36*x*y+48*y+12*x**2-32*x+18)+30)

  cc_gp = max(abs(df_gp(1)),abs(df_gp(2)))

END_PROVIDER
#+END_SRC

#+BEGIN_SRC f90 :comments org :tangle test_functions.irp.f
  BEGIN_PROVIDER [ double precision, df2_gp, (2,2) ]
  implicit none
  BEGIN_DOC
  END_DOC
 
  double precision :: x,y
  x = x_position(1)
  y = x_position(2)

  df2_gp(1,1) = ((2*x-3*y)**2*(27*y**2-36*x*y+48*y+12*x**2-32*x+18)+30)* &
(6*(y+x+1)**2+2*(3*y**2+6*x*y-14*y+3*x**2-14*x+19)+4*(y+x+1)*(6*y+6*x-14))+2* &
(2*(y+x+1)*(3*y**2+6*x*y-14*y+3*x**2-14*x+19)+(y+x+1)**2*(6*y+6*x-14))* &
(4*(2*x-3*y)*(27*y**2-36*x*y+48*y+12*x**2-32*x+18)+(-36*y+24*x-32)*(2*x-3*y)**2)+ &
((y+x+1)**2*(3*y**2+6*x*y-14*y+3*x**2-14*x+19)+1)* &
(8*(27*y**2-36*x*y+48*y+12*x**2-32*x+18)+8*(-36*y+24*x-32)*(2*x-3*y)+24*(2*x-3*y)**2)

  df2_gp(2,2) = ((2*x-3*y)**2*(27*y**2-36*x*y+48*y+12*x**2-32*x+18)+30)* &
(6*(y+x+1)**2+2*(3*y**2+6*x*y-14*y+3*x**2-14*x+19)+4*(y+x+1)*(6*y+6*x-14))+2* &
(2*(y+x+1)*(3*y**2+6*x*y-14*y+3*x**2-14*x+19)+(y+x+1)**2*(6*y+6*x-14))* &
((2*x-3*y)**2*(54*y-36*x+48)-6*(2*x-3*y)*(27*y**2-36*x*y+48*y+12*x**2-32*x+18))+ &
((y+x+1)**2*(3*y**2+6*x*y-14*y+3*x**2-14*x+19)+1)* &
(18*(27*y**2-36*x*y+48*y+12*x**2-32*x+18)-12*(2*x-3*y)*(54*y-36*x+48)+54*(2*x-3*y)**2)

  df2_gp(1,2) = ((2*x-3*y)**2*(27*y**2-36*x*y+48*y+12*x**2-32*x+18)+30)*(6*(y+x+1)**2+2*(3*y**2+6*x*y-14*y+3*x**2-14*x+19)+4*(y+x+1)*(6*y+6*x-14))+ &
(2*(y+x+1)*(3*y**2+6*x*y-14*y+3*x**2-14*x+19)+(y+x+1)**2*(6*y+6*x-14))*(4*(2*x-3*y)*(27*y**2-36*x*y+48*y+12*x**2-32*x+18)+(-36*y+24*x-32)*(2*x-3*y)**2)+ &
(2*(y+x+1)*(3*y**2+6*x*y-14*y+3*x**2-14*x+19)+(y+x+1)**2*(6*y+6*x-14))*((2*x-3*y)**2*(54*y-36*x+48)-6*(2*x-3*y)*(27*y**2-36*x*y+48*y+12*x**2-32*x+18))+ &
((y+x+1)**2*(3*y**2+6*x*y-14*y+3*x**2-14*x+19)+1)* &
(-12*(27*y**2-36*x*y+48*y+12*x**2-32*x+18)+4*(2*x-3*y)*(54*y-36*x+48)-6*(-36*y+24*x-32)*(2*x-3*y)-36*(2*x-3*y)**2)

  df2_gp(2,1) = df2_gp(1,2)

END_PROVIDER
#+END_SRC

** Log form of Goldstein-Price function
\begin{aling*}
f(\textbf{x})=\frac{1}{2.427} \left[ \log \left( [1 + (x1 + x2 + 1)^2
(19 - 14x1 + 3x1^2 - 14x2 + 6x1x2 + 3x2^2 )] [30+ (x1 - 3x2)^2 
(18 - 32x1 + 12x1^2 + 48x2 - 36x1x2 + 27x2^2)]\right) - 8.693 \right]
\end{align*}
with $xi = 4x_i -2$
** Beale function
\begin{align*}
f(x,y) = (1.5-x+xy)^2+(2.25-x+xy^2)^2+(2.625-x+xy^3)^2
\end{align*}
$f(3,0.5) = 0$, $-4.5 \leq x,y \leq 4.5$

wxmaxima:
f_b(x,y) :=(1.5-x+x*y)^2+(2.25-x+x*y^2)^2+(2.625-x+x*y^3)^2;

#+BEGIN_SRC f90 :comments org :tangle test_functions.irp.f
  BEGIN_PROVIDER [ double precision, f_beale ]
  implicit none
  BEGIN_DOC
  END_DOC
 
  double precision :: x,y
  x = x_position(1)
  y = x_position(2)

  f_beale =(1.5-x+x*y)**2+(2.25-x+x*y**2)**2+(2.625-x+x*y**3)**2

END_PROVIDER
#+END_SRC

#+BEGIN_SRC f90 :comments org :tangle test_functions.irp.f
  BEGIN_PROVIDER [ double precision, df_beale, (2) ]
&BEGIN_PROVIDER [ double precision, cc_beale ]
  implicit none
  BEGIN_DOC
  END_DOC
 
  double precision :: x,y
  x = x_position(1)
  y = x_position(2)

  df_beale(1) = 2*(y**3-1)*(x*y**3-x+2.625)+2*(y**2-1)*(x*y**2-x+2.25)+2*(y-1)*(x*y-x+1.5)
  df_beale(2) = 6*x*y**2*(x*y**3-x+2.625)+4*x*y*(x*y**2-x+2.25)+2*x*(x*y-x+1.5)

  cc_beale = max(abs(df_beale(1)),abs(df_beale(2)))

END_PROVIDER
#+END_SRC

#+BEGIN_SRC f90 :comments org :tangle test_functions.irp.f
  BEGIN_PROVIDER [ double precision, df2_beale, (2,2) ]
  implicit none
  BEGIN_DOC
  END_DOC
 
  double precision :: x,y
  x = x_position(1)
  y = x_position(2)

  df2_beale(1,1) = 2*(y**3-1)**2+2*(y**2-1)**2+2*(y-1)**2
  df2_beale(2,2) = 18*x**2*y**4+12*x*y*(x*y**3-x+2.625)+4*x*(x*y**2-x+2.25)+8*x**2*y**2+2*x**2
  df2_beale(1,2) = 6*x*y**2*(x*y**3-x+2.625)+4*x*y*(x*y**2-x+2.25)+2*x*(x*y-x+1.5)
  df2_beale(2,1) = df2_beale(1,2)

END_PROVIDER
#+END_SRC

** Booth function 
\begin{align*}
f_{booth} = (x+2y-7)^2 + (2x+y-5)^2
\end{align*}

$f(1,3) = 0$, $-10 \leq x,y \leq 10$

wxmaxima:
f(x,y):=(x+2*y-7)^2+(2*x+y-5)^2

#+BEGIN_SRC f90 :comments org :tangle test_functions.irp.f
  BEGIN_PROVIDER [ double precision, f_booth ]
  implicit none
  BEGIN_DOC
  END_DOC
 
  double precision :: x,y
  x = x_position(1)
  y = x_position(2)

  f_booth = (x+2*y-7)**2+(2*x+y-5)**2

END_PROVIDER
#+END_SRC

#+BEGIN_SRC f90 :comments org :tangle test_functions.irp.f
  BEGIN_PROVIDER [ double precision, df_booth, (2) ]
&BEGIN_PROVIDER [ double precision, cc_booth ]
  implicit none
  BEGIN_DOC
  END_DOC
 
  double precision :: x,y
  x = x_position(1)
  y = x_position(2)

  df_booth(1) =2*(2*y+x-7)+4*(y+2*x-5)
  df_booth(2) =4*(2*y+x-7)+2*(y+2*x-5)

  cc_booth = max(abs(df_booth(1)),abs(df_booth(2)))

END_PROVIDER
#+END_SRC

#+BEGIN_SRC f90 :comments org :tangle test_functions.irp.f
  BEGIN_PROVIDER [ double precision, df2_booth, (2,2) ]

  implicit none
  BEGIN_DOC
  END_DOC
 
  double precision :: x,y
  x = x_position(1)
  y = x_position(2)

  df2_booth(1,1) = 10
  df2_booth(2,2) = 10
  df2_booth(1,2) = 8
  df2_booth(2,1) = 8

END_PROVIDER
#+END_SRC

** Matyas function 
\begin{align*}
f(x,y) = 0.26(x^2+y^2)-0.48xy
\end{align*}
$f(0,0) = 0$, $-10 \leq x,y \leq 10$

wxmaxima:
f(x,y) := 0.26*(x^2+y^2)-0.48*x*y
#+BEGIN_SRC f90 :comments org :tangle test_functions.irp.f
  BEGIN_PROVIDER [ double precision, f_mat ]
  implicit none
  BEGIN_DOC
  END_DOC
 
  double precision :: x,y
  x = x_position(1)
  y = x_position(2)

  f_mat = 0.26*(x**2+y**2)-0.48*x*y

END_PROVIDER
#+END_SRC

#+BEGIN_SRC f90 :comments org :tangle test_functions.irp.f
  BEGIN_PROVIDER [ double precision, df_mat, (2) ]
&BEGIN_PROVIDER [ double precision, cc_mat]
  implicit none
  BEGIN_DOC
  END_DOC
 
  double precision :: x,y
  x = x_position(1)
  y = x_position(2)

  df_mat(1) = 0.52*x-0.48*y
  df_mat(2) = 0.52*y-0.48*x

  cc_mat = max(abs(df_mat(1)),abs(df_mat(2)))

END_PROVIDER
#+END_SRC

#+BEGIN_SRC f90 :comments org :tangle test_functions.irp.f
  BEGIN_PROVIDER [ double precision, df2_mat, (2,2) ]
  implicit none
  BEGIN_DOC
  END_DOC
 
  double precision :: x,y
  x = x_position(1)
  y = x_position(2)

  df2_mat(1,1) = 0.52
  df2_mat(2,2) = 0.52
  df2_mat(1,2) = 0.48
  df2_mat(2,1) = 0.48

END_PROVIDER
#+END_SRC

** Himmelblau's function
\begin{align*}
f(x,y)=(x**2 + y -11)^2 + (x + y^2 - 7)^2
\end{align*}
$f(3,2)=0$
$f(-2.805118,3.131312)=0$
$f(-3.779310,-3.283186)=0$
$f(3.584428,-1.848126)=0$
$-5 \leq x,y \leq 5$

wxmaxima:
f(x,y):=(x^2+y-11)^2+(x+y^2-7)^2
#+BEGIN_SRC f90 :comments org :tangle test_functions.irp.f
  BEGIN_PROVIDER [ double precision, f_him ]
  implicit none
  BEGIN_DOC
  END_DOC
 
  double precision :: x,y
  x = x_position(1)
  y = x_position(2)

  f_him = (x**2+y-11)**2+(x+y**2-7)**2

END_PROVIDER
#+END_SRC

#+BEGIN_SRC f90 :comments org :tangle test_functions.irp.f
  BEGIN_PROVIDER [ double precision, df_him, (2) ]
&BEGIN_PROVIDER [ double precision, cc_him]
  implicit none
  BEGIN_DOC
  END_DOC
 
  double precision :: x,y
  x = x_position(1)
  y = x_position(2)

  df_him(1) = 2*(y**2+x-7)+4*x*(y+x**2-11)
  df_him(2) = 4*y*(y**2+x-7)+2*(y+x**2-11)

  cc_him = max(abs(df_him(1)),abs(df_him(1)))

END_PROVIDER
#+END_SRC

#+BEGIN_SRC f90 :comments org :tangle test_functions.irp.f
  BEGIN_PROVIDER [ double precision, df2_him, (2,2) ]
  implicit none
  BEGIN_DOC
  END_DOC
 
  double precision :: x,y
  x = x_position(1)
  y = x_position(2)

  df2_him(1,1) = 4*(y+x**2-11)+8*x**2+2
  df2_him(2,2) = 4*(y**2+x-7)+8*y**2+2
  df2_him(1,2) = 4*y+4*x
  df2_him(2,1) = 4*y+4*x

END_PROVIDER
#+END_SRC

** McCormick function
\begin{align*}
f(x,y) = \sin(x+y) + (x-y)^2 - 1.5x + 2.5y +1 
\end{align*}
$(-0.54719,-1.54719)=-1.9133$
$-1.5\leq x \leq 4$, $-3 \leq y \leq 4$

wxmaxima:
f(x,y):=sin(x+y)+(x-y)^2+(-1.5)*x+2.5*y+1

#+BEGIN_SRC f90 :comments org :tangle test_functions.irp.f
  BEGIN_PROVIDER [ double precision, f_mc ]
  implicit none
  BEGIN_DOC
  END_DOC
 
  double precision :: x,y
  x = x_position(1)
  y = x_position(2)

  f_mc = sin(x+y)+(x-y)**2+(-1.5)*x+2.5*y+1

END_PROVIDER
#+END_SRC

#+BEGIN_SRC f90 :comments org :tangle test_functions.irp.f
  BEGIN_PROVIDER [ double precision, df_mc, (2) ]
&BEGIN_PROVIDER [ double precision, cc_mc]
  implicit none
  BEGIN_DOC
  END_DOC
 
  double precision :: x,y
  x = x_position(1)
  y = x_position(2)

  df_mc(1) = cos(y+x)+2*(x-y)-1.5
  df_mc(2) = cos(y+x)-2*(x-y)+2.5
 
  cc_mc = max(abs(df_mc(1)),abs(df_mc(2)))

END_PROVIDER
#+END_SRC

#+BEGIN_SRC f90 :comments org :tangle test_functions.irp.f
  BEGIN_PROVIDER [ double precision, df2_mc, (2,2) ]
  implicit none
  BEGIN_DOC
  END_DOC
 
  double precision :: x,y
  x = x_position(1)
  y = x_position(2)

  df2_mc(1,1) = 2-sin(y+x)
  df2_mc(2,2) = 2-sin(y+x)
  df2_mc(1,2) = -sin(y+x)-2
  df2_mc(2,1) = -sin(y+x)-2

END_PROVIDER
#+END_SRC

